// Generated by genprov 2.0.24
#include "SF_HostedService_Provider.h"
#include "SF_ComputerSystem_Provider.h"
#include "SF_SoftwareInstallationService_Provider.h"
#include "SF_DiagnosticTest_Provider.h"
#include "sf_provider.h"

CIMPLE_NAMESPACE_BEGIN

bool 
SF_HostedService_Provider::SWEnum::process(const solarflare::SystemElement& se)
{
    const solarflare::SWElement& sw = static_cast<const solarflare::SWElement&>(se);
    switch (sw.classify())
    {
        case solarflare::SWElement::SWPackage:
        case solarflare::SWElement::SWFirmware:
            /* do nothing, installable software */
            break;
        default:
            /* just skip */
            return true;
    }
    SF_HostedService *link = SF_HostedService::create(true);
    link->Antecedent = solarflare::CIMHelper::systemRef();
    link->Dependent = cast<CIM_Service *>(SF_SoftwareInstallationService_Provider::makeReference(sw));
    handler->handle(link);
    return true;
}

bool 
SF_HostedService_Provider::DiagEnum::process(const solarflare::SystemElement& se)
{
    const solarflare::Diagnostic& diag = static_cast<const solarflare::Diagnostic&>(se);
    SF_HostedService *link = SF_HostedService::create(true);
    link->Antecedent = solarflare::CIMHelper::systemRef();
    link->Dependent = cast<CIM_Service *>(diag.cimReference(SF_DiagnosticTest::static_meta_class));
    handler->handle(link);
    return true;
}


SF_HostedService_Provider::SF_HostedService_Provider()
{
}

SF_HostedService_Provider::~SF_HostedService_Provider()
{
}

Load_Status SF_HostedService_Provider::load()
{
    return LOAD_OK;
}

Unload_Status SF_HostedService_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_HostedService_Provider::get_instance(
    const SF_HostedService* model,
    SF_HostedService*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_HostedService_Provider::enum_instances(
    const SF_HostedService* model,
    Enum_Instances_Handler<SF_HostedService>* handler)
{
    SWEnum services(handler);
    solarflare::System::target.forAllSoftware(services);
    solarflare::System::target.forAllDiagnostics(services);
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_HostedService_Provider::create_instance(
    SF_HostedService* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_HostedService_Provider::delete_instance(
    const SF_HostedService* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_HostedService_Provider::modify_instance(
    const SF_HostedService* model,
    const SF_HostedService* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Enum_Associator_Names_Status SF_HostedService_Provider::enum_associator_names(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associator_Names_Handler<Instance>* handler)
{
    return ENUM_ASSOCIATOR_NAMES_UNSUPPORTED;
}

Enum_Associators_Status SF_HostedService_Provider::enum_associators(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associators_Handler<Instance>* handler)
{
    return ENUM_ASSOCIATORS_UNSUPPORTED;
}

Enum_References_Status SF_HostedService_Provider::enum_references(
    const Instance* instance,
    const SF_HostedService* model,
    const String& role,
    Enum_References_Handler<SF_HostedService>* handler)
{
    return ENUM_REFERENCES_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
