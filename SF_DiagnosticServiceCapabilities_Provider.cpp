// Generated by genprov 2.0.24
#include "SF_DiagnosticServiceCapabilities_Provider.h"

CIMPLE_NAMESPACE_BEGIN

SF_DiagnosticServiceCapabilities *SF_DiagnosticServiceCapabilities_Provider::makeReference(const solarflare::Diagnostic& diag)
{
    SF_DiagnosticServiceCapabilities *newSvc = SF_DiagnosticServiceCapabilities::create(true);

    newSvc->InstanceID.set(solarflare::System::target.prefix());
    newSvc->InstanceID.value.append(":");
    newSvc->InstanceID.value.append(diag.name());
    newSvc->InstanceID.value.append(" Capabilities");

    return newSvc;
}

bool SF_DiagnosticServiceCapabilities_Provider::Enum::process(const solarflare::Diagnostic& diag)
{
    SF_DiagnosticServiceCapabilities *newSvc = makeReference(diag);

    newSvc->Description.set(diag.description());
    newSvc->ElementName.set(diag.name());

    newSvc->SupportedLogOptions.null = false;
    newSvc->SupportedLogOptions.value.append(SF_DiagnosticServiceCapabilities::_SupportedLogOptions::enum_Results);

    newSvc->SupportedLogStorage.null = false;
    newSvc->SupportedLogStorage.value.append(SF_DiagnosticServiceCapabilities::_SupportedLogStorage::enum_DiagnosticRecordLog);
    newSvc->SupportedLogStorage.value.append(SF_DiagnosticServiceCapabilities::_SupportedLogStorage::enum_File);
    
    newSvc->SupportedExecutionControls.null = false;
    newSvc->SupportedExecutionControls.value.append(SF_DiagnosticServiceCapabilities::_SupportedExecutionControls::enum_Job_Creation);
    newSvc->SupportedExecutionControls.value.append(SF_DiagnosticServiceCapabilities::_SupportedExecutionControls::enum_Terminate_Job);

    handler->handle(newSvc);
    return true;
}


SF_DiagnosticServiceCapabilities_Provider::SF_DiagnosticServiceCapabilities_Provider()
{
}

SF_DiagnosticServiceCapabilities_Provider::~SF_DiagnosticServiceCapabilities_Provider()
{
}

Load_Status SF_DiagnosticServiceCapabilities_Provider::load()
{
    return LOAD_OK;
}

Unload_Status SF_DiagnosticServiceCapabilities_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_DiagnosticServiceCapabilities_Provider::get_instance(
    const SF_DiagnosticServiceCapabilities* model,
    SF_DiagnosticServiceCapabilities*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_DiagnosticServiceCapabilities_Provider::enum_instances(
    const SF_DiagnosticServiceCapabilities* model,
    Enum_Instances_Handler<SF_DiagnosticServiceCapabilities>* handler)
{
    Enum caps(handler);
    solarflare::System::target.forAllDiagnostics(caps);
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_DiagnosticServiceCapabilities_Provider::create_instance(
    SF_DiagnosticServiceCapabilities* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_DiagnosticServiceCapabilities_Provider::delete_instance(
    const SF_DiagnosticServiceCapabilities* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_DiagnosticServiceCapabilities_Provider::modify_instance(
    const SF_DiagnosticServiceCapabilities* model,
    const SF_DiagnosticServiceCapabilities* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
