// Generated by genprov 2.0.24
#include "SF_PortController_Provider.h"
#include "SF_ComputerSystem_Provider.h"

CIMPLE_NAMESPACE_BEGIN

SF_PortController *SF_PortController_Provider::makeReference(const solarflare::NIC& nic)
{
    const CIM_ComputerSystem *system = SF_ComputerSystem_Provider::findSystem();
    SF_PortController *newPC = SF_PortController::create(true);
    
    newPC->CreationClassName.set("SF_PortController");
    newPC->DeviceID.set(nic.vitalProductData().id());
    newPC->SystemCreationClassName.set(system->CreationClassName.value);
    newPC->SystemName.set(system->Name.value);
    return newPC;
}

bool SF_PortController_Provider::NICEnum::process(const solarflare::NIC& nic)
{
    SF_PortController *newPC = makeReference(nic);
    PortCounter counter;
    
    newPC->Description.set(nic.description());
    newPC->Name.set(nic.name());
    newPC->ElementName.set(nic.name());

    newPC->ControllerType.null = false;
    newPC->ControllerType.value = SF_PortController::_ControllerType::enum_Ethernet;
    // fixme: I could not figure out whether 'protocol' here is to be meant
    // as system<->device protocol (PCI), as a networking protocol
    // (Ethernet), or as an internal protocol (like MII)
    // Emulex uses "Other" type with unclear description; IBM
    // uses null, even though the field is mandatory in the profile.
    // The value map of the field does not unfortunately include any values
    // for 'modern' Ethernet; nor there are things like 'MII'
    newPC->ProtocolSupported.null = false;
    newPC->ProtocolSupported.value = SF_PortController::_ProtocolSupported::enum_PCI;

    newPC->RequestedState.null = false;
    newPC->RequestedState.value = SF_PortController::_RequestedState::enum_Not_Applicable;
    newPC->EnabledState.null = false;
    newPC->EnabledState.value = SF_PortController::_EnabledState::enum_Enabled;

    nic.forAllPorts(counter);
    newPC->MaxNumberControlled.set(counter.count());
       
    handler->handle(newPC);
    return true;
}


SF_PortController_Provider::SF_PortController_Provider()
{
}

SF_PortController_Provider::~SF_PortController_Provider()
{
}

Load_Status SF_PortController_Provider::load()
{
    solarflare::System::target.initialize();
    return LOAD_OK;
}

Unload_Status SF_PortController_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_PortController_Provider::get_instance(
    const SF_PortController* model,
    SF_PortController*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_PortController_Provider::enum_instances(
    const SF_PortController* model,
    Enum_Instances_Handler<SF_PortController>* handler)
{
    NICEnum nics(handler);

    solarflare::System::target.forAllNICs(nics);
    
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_PortController_Provider::create_instance(
    SF_PortController* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_PortController_Provider::delete_instance(
    const SF_PortController* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_PortController_Provider::modify_instance(
    const SF_PortController* model,
    const SF_PortController* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Invoke_Method_Status SF_PortController_Provider::RequestStateChange(
    const SF_PortController* self,
    const Property<uint16>& RequestedState,
    CIM_ConcreteJob*& Job,
    const Property<Datetime>& TimeoutPeriod,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_PortController_Provider::SetPowerState(
    const SF_PortController* self,
    const Property<uint16>& PowerState,
    const Property<Datetime>& Time,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_PortController_Provider::Reset(
    const SF_PortController* self,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_PortController_Provider::EnableDevice(
    const SF_PortController* self,
    const Property<boolean>& Enabled,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_PortController_Provider::OnlineDevice(
    const SF_PortController* self,
    const Property<boolean>& Online,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_PortController_Provider::QuiesceDevice(
    const SF_PortController* self,
    const Property<boolean>& Quiesce,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_PortController_Provider::SaveProperties(
    const SF_PortController* self,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_PortController_Provider::RestoreProperties(
    const SF_PortController* self,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
