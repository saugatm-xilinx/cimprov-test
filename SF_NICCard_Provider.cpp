// Generated by genprov 2.0.24
#include "SF_NICCard_Provider.h"
#include "sf_provider.h"

CIMPLE_NAMESPACE_BEGIN

SF_NICCard_Provider::SF_NICCard_Provider()
{
}

SF_NICCard_Provider::~SF_NICCard_Provider()
{
}

Load_Status SF_NICCard_Provider::load()
{
    solarflare::CIMHelper::initialize();
    return LOAD_OK;
}

Unload_Status SF_NICCard_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_NICCard_Provider::get_instance(
    const SF_NICCard* model,
    SF_NICCard*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_NICCard_Provider::enum_instances(
    const SF_NICCard* model,
    Enum_Instances_Handler<SF_NICCard>* handler)
{
    solarflare::EnumInstances<SF_NICCard>::allNICs(handler);
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_NICCard_Provider::create_instance(
    SF_NICCard* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_NICCard_Provider::delete_instance(
    const SF_NICCard* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_NICCard_Provider::modify_instance(
    const SF_NICCard* model,
    const SF_NICCard* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Invoke_Method_Status SF_NICCard_Provider::IsCompatible(
    const SF_NICCard* self,
    const CIM_PhysicalElement* ElementToCheck,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_NICCard_Provider::ConnectorPower(
    const SF_NICCard* self,
    const CIM_PhysicalConnector* Connector,
    const Property<boolean>& PoweredOn,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
