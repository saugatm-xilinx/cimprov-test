/***************************************************************************//*! \file liprovider/SF_EthernetPort_Provider.cpp
** <L5_PRIVATE L5_SOURCE>
** \author  OktetLabs
**  \brief  CIM Provider
**   \date  2013/10/02
**    \cop  (c) Solarflare Communications Inc.
** </L5_PRIVATE>
*//*
\**************************************************************************/

// Generated by genprov 2.0.24
#include "SF_EthernetPort_Provider.h"
#include "SF_ComputerSystem_Provider.h"
#include "sf_provider.h"

CIMPLE_NAMESPACE_BEGIN

SF_EthernetPort_Provider::SF_EthernetPort_Provider()
{
}

SF_EthernetPort_Provider::~SF_EthernetPort_Provider()
{
}

Load_Status SF_EthernetPort_Provider::load()
{
    solarflare::System::target.initialize();
    return LOAD_OK;
}

Unload_Status SF_EthernetPort_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_EthernetPort_Provider::get_instance(
    const SF_EthernetPort* model,
    SF_EthernetPort*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_EthernetPort_Provider::enum_instances(
    const SF_EthernetPort* model,
    Enum_Instances_Handler<SF_EthernetPort>* handler)
{
    solarflare::EnumInstances<SF_EthernetPort>::allInterfaces(handler);
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_EthernetPort_Provider::create_instance(
    SF_EthernetPort* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_EthernetPort_Provider::delete_instance(
    const SF_EthernetPort* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

void SF_EthernetPort_Provider::SpeedChanger::handler(solarflare::SystemElement& se, unsigned)
{
    solarflare::Interface &intf = static_cast<solarflare::Interface&>(se);
    
    if (reqSpeed == solarflare::Port::SpeedUnknown ||
            reqSpeed > intf.nic()->maxLinkSpeed())
    {
        ok = false;
        return;
    }
    intf.port()->linkSpeed(reqSpeed);
    ok = true;
}

Modify_Instance_Status SF_EthernetPort_Provider::modify_instance(
    const SF_EthernetPort* model,
    const SF_EthernetPort* instance)
{
    
    if (!instance->RequestedSpeed.null)
    {
        SpeedChanger changer(
            solarflare::Port::speedValue(instance->RequestedSpeed.value),
            model);
        
        if (!changer.forInterface())
            return MODIFY_INSTANCE_NOT_FOUND;
    }

    return MODIFY_INSTANCE_OK;
}

#if CIM_SCHEMA_VERSION_MINOR > 0
void SF_EthernetPort_Provider::StateChanger::handler(solarflare::SystemElement& se, unsigned)
{
    solarflare::Interface &intf = static_cast<solarflare::Interface&>(se);
    
    switch (reqState)
    {
        case SF_EthernetPort::_RequestedState::enum_Enabled:
            intf.enable(true);
            break;
        case SF_EthernetPort::_RequestedState::enum_Disabled:
            intf.enable(false);
            break;
        case SF_EthernetPort::_RequestedState::enum_Reset:
            if (intf.ifStatus())
            {
                intf.enable(false);
                intf.enable(true);
            }
            break;
        default:
            // cannot happen, do nothing
            break;
    }

    if (intf.port() != NULL)
        solarflare::System::savePortReqState(intf.port()->name(), reqState);
}
#endif


Invoke_Method_Status SF_EthernetPort_Provider::RequestStateChange(
    const SF_EthernetPort* self,
    const Property<uint16>& RequestedState,
    CIM_ConcreteJob*& Job,
    const Property<Datetime>& TimeoutPeriod,
    Property<uint32>& return_value)
{
#if CIM_SCHEMA_VERSION_MINOR == 0
    return INVOKE_METHOD_UNSUPPORTED;
#else
    /// CIMPLE is unable to generate enums for method parameters
    enum ReturnValue 
    {
        OK = 0,
        Error = 2,
        InvalidParameter = 5,
        BadTimeout = 4098,
    };

    if (RequestedState.null)
    {
        return_value.set(InvalidParameter);
    }
    else if (!TimeoutPeriod.null && !(TimeoutPeriod.value == Datetime()))
    {
        return_value.set(BadTimeout);
    }
    else
    {
        switch (RequestedState.value)
        {
            case SF_EthernetPort::_RequestedState::enum_Enabled:
            case SF_EthernetPort::_RequestedState::enum_Disabled:
            case SF_EthernetPort::_RequestedState::enum_Reset:
            {
                StateChanger changer(RequestedState.value, self);
                if (changer.forInterface())
                {
                    return_value.set(OK);
                    break;
                }
            }
                // fall through
            default:
                return_value.set(InvalidParameter);
        }
    }

    return INVOKE_METHOD_OK;
#endif
}

Invoke_Method_Status SF_EthernetPort_Provider::SetPowerState(
    const SF_EthernetPort* self,
    const Property<uint16>& PowerState,
    const Property<Datetime>& Time,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_EthernetPort_Provider::Reset(
    const SF_EthernetPort* self,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_EthernetPort_Provider::EnableDevice(
    const SF_EthernetPort* self,
    const Property<boolean>& Enabled,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_EthernetPort_Provider::OnlineDevice(
    const SF_EthernetPort* self,
    const Property<boolean>& Online,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_EthernetPort_Provider::QuiesceDevice(
    const SF_EthernetPort* self,
    const Property<boolean>& Quiesce,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_EthernetPort_Provider::SaveProperties(
    const SF_EthernetPort* self,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_EthernetPort_Provider::RestoreProperties(
    const SF_EthernetPort* self,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
