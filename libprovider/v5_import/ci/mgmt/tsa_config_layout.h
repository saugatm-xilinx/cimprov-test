/**************************************************************************\
*//*! \file
** <L5_PRIVATE L5_SOURCE>
** \author  jhs
**  \brief  TSA config item layouts
**   \date  2017/05/09
**    \cop  (c) Solarflare Communications Inc.
** </L5_PRIVATE>
*//*
\**************************************************************************/

/* These structures define the layouts for the TSA config items stored in
 * tsa_config partition in NVRAM.
 *
 * These are used directly by the MC and should also be usable directly on host
 * systems which are little-endian and do not do strange things with structure
 * padding.  (Big-endian host systems will require some byte-swapping.)
 *
 *                                    -----
 *
 * The current tag IDs have a general structure defined tlv_layout.h and
 * nvram_private_tlv.h.
 *
 *                                    -----
 *
 * As with the previous Siena structures, each structure here is laid out
 * carefully: values are aligned to their natural boundary, with explicit
 * padding fields added where necessary.  (No, technically this does not
 * absolutely guarantee portability.  But, in practice, compilers are generally
 * sensible enough not to introduce completely pointless padding, and it works
 * well enough.)
 */


#ifndef CI_MGMT_TSA_CONFIG_LAYOUT_H
#define CI_MGMT_TSA_CONFIG_LAYOUT_H

/* TSA NIC IP address configuration
 *
 * Sets the TSA NIC IP address statically via configuration tool or dynamically
 * via DHCP via snooping based on the mode selection (0=Static, 1=DHCP, 2=Snoop)
 */
#define TSA_TAG_TSAN_CONFIG             (0x4e000000)

#define TSA_TSAN_IP_MODE_STATIC         (0)
#define TSA_TSAN_IP_MODE_DHCP           (1)
#define TSA_TSAN_IP_MODE_SNOOP          (2)
struct tsa_config_tsan_config
{
  uint32_t mode;
  uint32_t ip;
  uint32_t netmask;
  uint32_t gateway;
  uint32_t port;
};

/* TSA Controller IP address configuration
 *
 * Sets the TSA Controller IP address statically via configuration tool
 */
#define TSA_TAG_TSAC_CONFIG             (0x4e010000)

#define TSA_MAX_TSACS (4)
struct tsa_config_tsac_config {
  uint32_t num_tsacs;
  uint32_t ip[TSA_MAX_TSACS];
  uint32_t port[TSA_MAX_TSACS];
};

/* Binding ticket
 *
 * Sets the TSA NIC binding ticket used for binding process between the TSA NIC
 * and the TSA Controller
 */
#define TSA_TAG_BINDING_TICKET          (0x4d020000)

struct tsa_config_binding_ticket {
  uint8_t bytes[0];
};

/* CA root certificate
 *
 * Sets the CA root certificate used for TSA Controller verfication during
 * TLS connection setup between the TSA NIC and the TSA Controller
 */
#define TSA_TAG_CA_ROOT_CERT            (0x4e030000)

struct tsa_config_ca_root_cert {
  uint8_t bytes[0];
};

/* PIKtsan
 *
 * Private key used to sign audit messages generated by a TSAN. Unique to
 * each TSAN.
 */
#define TSA_TAG_PIK_TSAN                (0x4d040000)

struct tsa_config_pik_tsan {
  uint8_t bytes[0];
};

/* Unbind token
 *
 * Secret code needed to unbind the adapter.
 */
#define TSA_TAG_UNBIND_TOKEN            (0x4d050000)

struct tsa_config_unbind_token {
  uint8_t token[16];
};

/* TSA configuration over MCDI
 *
 * Configuration items in MC_CMD_TSA_CONFIG has additional tlv data.
 */
typedef struct tsa_config_mcdi_item_s {
  uint32_t tag;
  uint32_t length;

  union {
    uint8_t data[0];
    struct tsa_config_tsan_config tsan_config;
    struct tsa_config_tsac_config tsac_config;
    struct tsa_config_binding_ticket binding_ticket;
    struct tsa_config_ca_root_cert ca_root_cert;
    struct tsa_config_pik_tsan pik_tsan;
    struct tsa_config_unbind_token unbind_token;
  };
} tsa_config_item_t;

#endif /* CI_MGMT_TSA_CONFIG_LAYOUT_H */
