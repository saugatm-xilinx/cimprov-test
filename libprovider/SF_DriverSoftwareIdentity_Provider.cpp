/***************************************************************************//*! \file liprovider/SF_DriverSoftwareIdentity_Provider.cpp
** <L5_PRIVATE L5_SOURCE>
** \author  OktetLabs
**  \brief  CIM Provider
**   \date  2013/10/02
**    \cop  (c) Solarflare Communications Inc.
** </L5_PRIVATE>
*//*
\**************************************************************************/

// Generated by genprov 2.0.24
#include "SF_DriverSoftwareIdentity_Provider.h"
#include "sf_provider.h"

CIMPLE_NAMESPACE_BEGIN

using solarflare::System;
using solarflare::SWElement;

enum ReturnValue 
{
    OK = 0,
    Error = 2,
    InvalidParameter = 5,
};

SF_DriverSoftwareIdentity_Provider::SF_DriverSoftwareIdentity_Provider()
{
}

SF_DriverSoftwareIdentity_Provider::~SF_DriverSoftwareIdentity_Provider()
{
}

Load_Status SF_DriverSoftwareIdentity_Provider::load()
{
    return LOAD_OK;
}

Unload_Status SF_DriverSoftwareIdentity_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_DriverSoftwareIdentity_Provider::get_instance(
    const SF_DriverSoftwareIdentity* model,
    SF_DriverSoftwareIdentity*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_DriverSoftwareIdentity_Provider::enum_instances(
    const SF_DriverSoftwareIdentity* model,
    Enum_Instances_Handler<SF_DriverSoftwareIdentity>* handler)
{
    solarflare::EnumInstances<SF_DriverSoftwareIdentity>::allSoftware(handler);
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_DriverSoftwareIdentity_Provider::create_instance(
    SF_DriverSoftwareIdentity* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_DriverSoftwareIdentity_Provider::delete_instance(
    const SF_DriverSoftwareIdentity* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_DriverSoftwareIdentity_Provider::modify_instance(
    const SF_DriverSoftwareIdentity* model,
    const SF_DriverSoftwareIdentity* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

#if defined(TARGET_CIM_SERVER_esxi) || defined(TARGET_CIM_SERVER_esxi_native)
Invoke_Method_Status SF_DriverSoftwareIdentity_Provider::GetDriverLoadParameters(
    const SF_DriverSoftwareIdentity* self,
    Property<String>& LoadParameters,
    Property<uint32>& return_value)
{
    String loadParams;

    if (solarflare::System::target.getDriverLoadParameters(loadParams) < 0)
        return_value.set(Error);
    else
    {
        LoadParameters.set(loadParams);
        return_value.set(OK);
    }

    return INVOKE_METHOD_OK;
}

Invoke_Method_Status SF_DriverSoftwareIdentity_Provider::SetDriverLoadParameters(
    const SF_DriverSoftwareIdentity* self,
    const Property<String>& LoadParameters,
    Property<uint32>& return_value)
{
    String loadParams;

    if (LoadParameters.null)
        loadParams = "";
    else
        loadParams = LoadParameters.value;

    if (solarflare::System::target.setDriverLoadParameters(
                                                    loadParams) < 0)
        return_value.set(Error);
    else
        return_value.set(OK);

    return INVOKE_METHOD_OK;
}
#endif
/*@END@*/

CIMPLE_NAMESPACE_END
