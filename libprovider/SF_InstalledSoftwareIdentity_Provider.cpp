/***************************************************************************//*! \file liprovider/SF_InstalledSoftwareIdentity_Provider.cpp
** <L5_PRIVATE L5_SOURCE>
** \author  OktetLabs
**  \brief  CIM Provider
**   \date  2013/10/02
**    \cop  (c) Solarflare Communications Inc.
** </L5_PRIVATE>
*//*
\**************************************************************************/

// Generated by genprov 2.0.24
#include "SF_InstalledSoftwareIdentity_Provider.h"
#include "SF_SoftwareIdentity.h"
#include "SF_SoftwareIdentity_Provider.h"
#include "SF_ComputerSystem_Provider.h"
#include "sf_provider.h"

CIMPLE_NAMESPACE_BEGIN

SF_InstalledSoftwareIdentity_Provider::SF_InstalledSoftwareIdentity_Provider()
{
}

SF_InstalledSoftwareIdentity_Provider::~SF_InstalledSoftwareIdentity_Provider()
{
}

Load_Status SF_InstalledSoftwareIdentity_Provider::load()
{
    return LOAD_OK;
}

Unload_Status SF_InstalledSoftwareIdentity_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_InstalledSoftwareIdentity_Provider::get_instance(
    const SF_InstalledSoftwareIdentity* model,
    SF_InstalledSoftwareIdentity*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}


Enum_Instances_Status SF_InstalledSoftwareIdentity_Provider::enum_instances(
    const SF_InstalledSoftwareIdentity* model,
    Enum_Instances_Handler<SF_InstalledSoftwareIdentity>* handler)
{
    solarflare::EnumInstances<SF_InstalledSoftwareIdentity>::allSoftware(handler);

    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_InstalledSoftwareIdentity_Provider::create_instance(
    SF_InstalledSoftwareIdentity* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_InstalledSoftwareIdentity_Provider::delete_instance(
    const SF_InstalledSoftwareIdentity* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_InstalledSoftwareIdentity_Provider::modify_instance(
    const SF_InstalledSoftwareIdentity* model,
    const SF_InstalledSoftwareIdentity* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

static int tryFindAssociators(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associator_Names_Handler<Instance>* handlerNames,
    Enum_Associators_Handler<Instance>* handler)
{
    if (strcmp(instance->meta_class->name, "SF_SoftwareIdentity") == 0 &&
        solarflare::CIMHelper::findSystem() != NULL &&
        (role.equali("InstalledSoftware") || role.empty()) &&
        (result_class.equali("CIM_System") || result_class.empty()) &&
        (result_role.equali("System") || result_role.empty()))
    {
        if (handler != NULL)
            handler->handle(
                      cast<Instance *>(
                           solarflare::CIMHelper::findSystem()->clone()));
        else if (handlerNames != NULL)
            handlerNames->handle(
                      cast<Instance *>(
                           solarflare::CIMHelper::findSystem()->clone()));
        return 0;
    }

    return -1;
}

Enum_Associator_Names_Status SF_InstalledSoftwareIdentity_Provider::enum_associator_names(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associator_Names_Handler<Instance>* handler)
{
    if (tryFindAssociators(instance, result_class,
                           role, result_role, handler, NULL) == 0)
        return ENUM_ASSOCIATOR_NAMES_OK;

    return ENUM_ASSOCIATOR_NAMES_UNSUPPORTED;
}

Enum_Associators_Status SF_InstalledSoftwareIdentity_Provider::enum_associators(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associators_Handler<Instance>* handler)
{
    if (tryFindAssociators(instance, result_class,
                           role, result_role, NULL, handler) == 0)
        return ENUM_ASSOCIATORS_OK;
    return ENUM_ASSOCIATORS_UNSUPPORTED;
}

Enum_References_Status SF_InstalledSoftwareIdentity_Provider::enum_references(
    const Instance* instance,
    const SF_InstalledSoftwareIdentity* model,
    const String& role,
    Enum_References_Handler<SF_InstalledSoftwareIdentity>* handler)
{
    if (solarflare::CIMHelper::findSystem() != NULL &&
        strcmp(instance->meta_class->name, "SF_SoftwareIdentity") == 0 &&
        (role.equali("InstalledSoftware") || role.empty()))
    {
        SF_InstalledSoftwareIdentity *link =
                              SF_InstalledSoftwareIdentity::create(true);
        link->System =
          cast<cimple::CIM_System *>(
                         solarflare::CIMHelper::findSystem()->clone());
        link->InstalledSoftware =
                  cast<cimple::CIM_SoftwareIdentity *>(instance);
#if NEED_ASSOC_IN_ROOT_CIMV2
        link->InstalledSoftware->__name_space =
                                      solarflare::CIMHelper::solarflareNS;
#endif 
        handler->handle(link); 

        return ENUM_REFERENCES_OK;
    }
    return ENUM_REFERENCES_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
