/***************************************************************************//*! \file liprovider/SF_DiagnosticSoftwareIdentity_Provider.cpp
** <L5_PRIVATE L5_SOURCE>
** \author  OktetLabs
**  \brief  CIM Provider
**   \date  2013/10/02
**    \cop  (c) Solarflare Communications Inc.
** </L5_PRIVATE>
*//*
\**************************************************************************/

// Generated by genprov 2.0.24
#include "SF_DiagnosticSoftwareIdentity_Provider.h"
#include "sf_provider.h"

CIMPLE_NAMESPACE_BEGIN

using solarflare::System;
using solarflare::SWElement;

SF_DiagnosticSoftwareIdentity_Provider::SF_DiagnosticSoftwareIdentity_Provider()
{
}

SF_DiagnosticSoftwareIdentity_Provider::~SF_DiagnosticSoftwareIdentity_Provider()
{
}

Load_Status SF_DiagnosticSoftwareIdentity_Provider::load()
{
    return LOAD_OK;
}

Unload_Status SF_DiagnosticSoftwareIdentity_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_DiagnosticSoftwareIdentity_Provider::get_instance(
    const SF_DiagnosticSoftwareIdentity* model,
    SF_DiagnosticSoftwareIdentity*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_DiagnosticSoftwareIdentity_Provider::enum_instances(
    const SF_DiagnosticSoftwareIdentity* model,
    Enum_Instances_Handler<SF_DiagnosticSoftwareIdentity>* handler)
{
    solarflare::EnumInstances<SF_DiagnosticSoftwareIdentity>::allSoftware(handler);
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_DiagnosticSoftwareIdentity_Provider::create_instance(
    SF_DiagnosticSoftwareIdentity* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_DiagnosticSoftwareIdentity_Provider::delete_instance(
    const SF_DiagnosticSoftwareIdentity* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_DiagnosticSoftwareIdentity_Provider::modify_instance(
    const SF_DiagnosticSoftwareIdentity* model,
    const SF_DiagnosticSoftwareIdentity* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
