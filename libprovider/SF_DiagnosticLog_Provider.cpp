/***************************************************************************//*! \file liprovider/SF_DiagnosticLog_Provider.cpp
** <L5_PRIVATE L5_SOURCE>
** \author  OktetLabs
**  \brief  CIM Provider
**   \date  2013/10/02
**    \cop  (c) Solarflare Communications Inc.
** </L5_PRIVATE>
*//*
\**************************************************************************/

// Generated by genprov 2.0.24
#include "SF_DiagnosticLog_Provider.h"
#include "sf_provider.h"

CIMPLE_NAMESPACE_BEGIN

SF_DiagnosticLog_Provider::SF_DiagnosticLog_Provider()
{
}

SF_DiagnosticLog_Provider::~SF_DiagnosticLog_Provider()
{
}

Load_Status SF_DiagnosticLog_Provider::load()
{
    return LOAD_OK;
}

Unload_Status SF_DiagnosticLog_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_DiagnosticLog_Provider::get_instance(
    const SF_DiagnosticLog* model,
    SF_DiagnosticLog*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_DiagnosticLog_Provider::enum_instances(
    const SF_DiagnosticLog* model,
    Enum_Instances_Handler<SF_DiagnosticLog>* handler)
{
    solarflare::EnumInstances<SF_DiagnosticLog>::allDiagnostics(handler);
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_DiagnosticLog_Provider::create_instance(
    SF_DiagnosticLog* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_DiagnosticLog_Provider::delete_instance(
    const SF_DiagnosticLog* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_DiagnosticLog_Provider::modify_instance(
    const SF_DiagnosticLog* model,
    const SF_DiagnosticLog* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

void SF_DiagnosticLog_Provider::ChangeState::handler(solarflare::SystemElement& se,
                                                     unsigned)
{
    solarflare::Diagnostic &diag = static_cast<solarflare::Diagnostic&>(se);
    solarflare::Logger &log = diag.log();

    switch (reqState)
    {
        case SF_DiagnosticLog::_RequestedState::enum_Enabled:
            log.enable(true);
            break;
        case SF_DiagnosticLog::_RequestedState::enum_Disabled:
            log.enable(false);
            break;
        case SF_DiagnosticLog::_RequestedState::enum_Reset:
            if (log.isEnabled())
            {
                log.enable(false);
                log.enable(true);
            }
            break;
        default:
            // cannot happen
            break;
    }
}

Invoke_Method_Status SF_DiagnosticLog_Provider::RequestStateChange(
    const SF_DiagnosticLog* self,
    const Property<uint16>& RequestedState,
    CIM_ConcreteJob*& Job,
    const Property<Datetime>& TimeoutPeriod,
    Property<uint32>& return_value)
{
    /// CIMPLE is unable to generate enums for method parameters
    enum ReturnValue 
    {
        OK = 0,
        Error = 2,
        InvalidParameter = 5,
        BadTimeout = 4098,
    };
    if (RequestedState.null)
    {
        return_value.set(InvalidParameter);
    }
    else if (!TimeoutPeriod.null && !(TimeoutPeriod.value == Datetime()))
    {
        return_value.set(BadTimeout);
    }
    else
    {
        switch (RequestedState.value)
        {
            case SF_DiagnosticLog::_RequestedState::enum_Enabled:
            case SF_DiagnosticLog::_RequestedState::enum_Disabled:
            case SF_DiagnosticLog::_RequestedState::enum_Reset:
            {
                ChangeState changer(RequestedState.value, self);
                if (changer.forDiagnostic())
                {
                    return_value.set(OK);
                    break;
                }
                // fall through
            }
            default:
                return_value.set(InvalidParameter);
        }
    }
    return INVOKE_METHOD_OK;
}

void SF_DiagnosticLog_Provider::LogClearer::handler(solarflare::SystemElement& se,
                                                     unsigned)
{
    solarflare::Diagnostic &diag = static_cast<solarflare::Diagnostic&>(se);
    solarflare::Logger &log = diag.log();
    log.clear();
}


Invoke_Method_Status SF_DiagnosticLog_Provider::ClearLog(
    const SF_DiagnosticLog* self,
    Property<uint32>& return_value)
{
    LogClearer clearer(self);
    
    if (!clearer.forDiagnostic())
        return_value.set(2); // Error
    else
        return_value.set(0); // OK

    return INVOKE_METHOD_OK;
}

/*@END@*/

CIMPLE_NAMESPACE_END
