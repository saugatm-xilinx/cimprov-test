/***************************************************************************//*! \file liprovider/SF_DiagnosticTest_Provider.h
** <L5_PRIVATE L5_SOURCE>
** \author  OktetLabs
**  \brief  CIM Provider
**   \date  2013/10/02
**    \cop  (c) Solarflare Communications Inc.
** </L5_PRIVATE>
*//*
\**************************************************************************/

// Generated by genprov 2.0.24
#ifndef _SF_DiagnosticTest_Provider_h
#define _SF_DiagnosticTest_Provider_h

#include <cimple/cimple.h>
#include "SF_DiagnosticTest.h"
#include "sf_provider.h"

CIMPLE_NAMESPACE_BEGIN

class SF_DiagnosticTest_Provider
{
    class CheckNIC : public solarflare::Action
    {
        const solarflare::NIC *nic;
        bool ok;
    protected:
        virtual void handler(solarflare::SystemElement& se, unsigned);
    public:
        CheckNIC(const solarflare::NIC *n,
                 const Instance *inst) :
            solarflare::Action(inst),
            nic(n), ok(false) {}
        bool isOk() const { return ok; }
    };

    class Runner : public solarflare::Action
    {
        const CIM_ManagedElement *nicElem;
        CIM_ConcreteJob*& job;
        bool ok;
    protected:
        virtual void handler(solarflare::SystemElement& se, unsigned);
    public:
        Runner(CIM_ConcreteJob*& j, const CIM_ManagedElement *ne, const Instance *inst) : 
            solarflare::Action(inst), nicElem(ne), job(j), ok(false) {}
        bool isOk() const { return ok; }
    };


public:

    typedef SF_DiagnosticTest Class;

    SF_DiagnosticTest_Provider();

    ~SF_DiagnosticTest_Provider();

    Load_Status load();

    Unload_Status unload();

    Get_Instance_Status get_instance(
        const SF_DiagnosticTest* model,
        SF_DiagnosticTest*& instance);

    Enum_Instances_Status enum_instances(
        const SF_DiagnosticTest* model,
        Enum_Instances_Handler<SF_DiagnosticTest>* handler);

    Create_Instance_Status create_instance(
        SF_DiagnosticTest* instance);

    Delete_Instance_Status delete_instance(
        const SF_DiagnosticTest* instance);

    Modify_Instance_Status modify_instance(
        const SF_DiagnosticTest* model,
        const SF_DiagnosticTest* instance);

    Invoke_Method_Status RequestStateChange(
        const SF_DiagnosticTest* self,
        const Property<uint16>& RequestedState,
        CIM_ConcreteJob*& Job,
        const Property<Datetime>& TimeoutPeriod,
        Property<uint32>& return_value);

    Invoke_Method_Status StartService(
        const SF_DiagnosticTest* self,
        Property<uint32>& return_value);

    Invoke_Method_Status StopService(
        const SF_DiagnosticTest* self,
        Property<uint32>& return_value);

    Invoke_Method_Status RunDiagnostic(
        const SF_DiagnosticTest* self,
        const CIM_ManagedElement* ManagedElement,
        const CIM_DiagnosticSetting* DiagSetting,
        const CIM_JobSettingData* JobSetting,
        CIM_ConcreteJob*& Job,
        Property<uint32>& return_value);

    Invoke_Method_Status RunDiagnosticService(
        const SF_DiagnosticTest* self,
        const CIM_ManagedElement* ManagedElement,
        const CIM_DiagnosticSettingData* DiagnosticSettings,
        const CIM_JobSettingData* JobSettings,
        CIM_ConcreteJob*& Job,
        Property<uint32>& return_value);

    Invoke_Method_Status RunTest(
        const SF_DiagnosticTest* self,
        const CIM_ManagedSystemElement* SystemElement,
        const CIM_DiagnosticSetting* Setting,
        CIM_DiagnosticResult*& Result,
        Property<uint32>& return_value);

    Invoke_Method_Status ClearResults(
        const SF_DiagnosticTest* self,
        const CIM_ManagedSystemElement* SystemElement,
        Property<Array_String>& ResultsNotCleared,
        Property<uint32>& return_value);

    Invoke_Method_Status DiscontinueTest(
        const SF_DiagnosticTest* self,
        const CIM_ManagedSystemElement* SystemElement,
        const CIM_DiagnosticResult* Result,
        Property<boolean>& TestingStopped,
        Property<uint32>& return_value);

    Invoke_Method_Status ChangeAffectedElementsAssignedSequence(
        const SF_DiagnosticTest* self,
        const Property< Array<CIM_ManagedElement*> >& ManagedElements,
        const Property<Array_uint16>& AssignedSequence,
        CIM_ConcreteJob*& Job,
        Property<uint32>& return_value);

    /*@END@*/
};

CIMPLE_NAMESPACE_END

#endif /* _SF_DiagnosticTest_Provider_h */
