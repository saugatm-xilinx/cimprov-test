/***************************************************************************//*! \file liprovider/SF_NICCard_Provider.cpp
** <L5_PRIVATE L5_SOURCE>
** \author  OktetLabs
**  \brief  CIM Provider
**   \date  2013/10/02
**    \cop  (c) Solarflare Communications Inc.
** </L5_PRIVATE>
*//*
\**************************************************************************/

// Generated by genprov 2.0.24
#include "SF_NICCard_Provider.h"
#include "sf_provider.h"

CIMPLE_NAMESPACE_BEGIN

enum ReturnValue 
{
    OK = 0,
    Error = 2,
    InvalidParameter = 5,
};


SF_NICCard_Provider::SF_NICCard_Provider()
{
}

SF_NICCard_Provider::~SF_NICCard_Provider()
{
}

Load_Status SF_NICCard_Provider::load()
{
    solarflare::CIMHelper::initialize();
    return LOAD_OK;
}

Unload_Status SF_NICCard_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_NICCard_Provider::get_instance(
    const SF_NICCard* model,
    SF_NICCard*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_NICCard_Provider::enum_instances(
    const SF_NICCard* model,
    Enum_Instances_Handler<SF_NICCard>* handler)
{
    solarflare::EnumInstances<SF_NICCard>::allNICs(handler);
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_NICCard_Provider::create_instance(
    SF_NICCard* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_NICCard_Provider::delete_instance(
    const SF_NICCard* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_NICCard_Provider::modify_instance(
    const SF_NICCard* model,
    const SF_NICCard* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Invoke_Method_Status SF_NICCard_Provider::IsCompatible(
    const SF_NICCard* self,
    const CIM_PhysicalElement* ElementToCheck,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_NICCard_Provider::ConnectorPower(
    const SF_NICCard* self,
    const CIM_PhysicalConnector* Connector,
    const Property<boolean>& PoweredOn,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_NICCard_Provider::getSFUDevices(
    const SF_NICCard* self,
    Property<String>& Devices,
    Property<uint32>& return_value)
{
    using namespace solarflare;

    String devs = solarflare::System::target.getSFUDevices();

    if (devs.empty())
    {
        Devices.null = true;
        return_value.set(Error);
    }
    else
    {
        Devices.null = false;
        Devices.value = devs;
        return_value.set(OK);
    }

    return INVOKE_METHOD_OK;
}

Invoke_Method_Status SF_NICCard_Provider::NVExists(
    const SF_NICCard* self,
    const Property<String>& Device,
    const Property<uint32>& Type,
    const Property<uint32>& Subtype,
    const Property<boolean>& TryOtherDevs,
    Property<boolean>& Exists,
    Property<String>& CorrectDevice,
    Property<uint32>& return_value)
{
    using namespace solarflare;

    String  correct_dev;
    boolean try_other_devs = false;

    if (Device.null || Device.value.empty() ||
        Type.null || Subtype.null)
    {
        PROVIDER_LOG_ERR("%s(): necessary parameters "
                         "should be specified",
                         __FUNCTION__);
        return_value.set(InvalidParameter);
        return INVOKE_METHOD_OK;
    }

    if (!TryOtherDevs.null)
        try_other_devs = TryOtherDevs.value;

    Exists.null = false;
    if (solarflare::System::target.NVExists(Device.value,
                                            Type.value,
                                            Subtype.value,
                                            try_other_devs,
                                            correct_dev))
    {
        Exists.value = true;
        if (try_other_devs)
        {
            CorrectDevice.null = false;
            CorrectDevice.value = correct_dev;
        }
    }
    else
        Exists.value = false;

    return_value.set(OK);
    return INVOKE_METHOD_OK;
}

Invoke_Method_Status SF_NICCard_Provider::NVOpen(
    const SF_NICCard* self,
    const Property<String>& Device,
    const Property<uint32>& Type,
    const Property<uint32>& Subtype,
    Property<uint32>& NVContext,
    Property<uint32>& return_value)
{
    using namespace solarflare;

    int nv_cntx;

    if (Device.null || Device.value.empty() ||
        Type.null || Subtype.null)
    {
        PROVIDER_LOG_ERR("%s(): necessary parameters "
                         "should be specified",
                         __FUNCTION__);
        return_value.set(InvalidParameter);
        return INVOKE_METHOD_OK;
    }
    
    nv_cntx = solarflare::System::target.NVOpen(Device.value,
                                                Type.value,
                                                Subtype.value);

    if (nv_cntx < 0)
    {
        NVContext.null = true;
        return_value.set(Error);
    }
    else
    {
        NVContext.null = false;
        NVContext.value = nv_cntx;
        return_value.set(OK);
    }

    return INVOKE_METHOD_OK;
}

Invoke_Method_Status SF_NICCard_Provider::NVClose(
    const SF_NICCard* self,
    const Property<uint32>& NVContext,
    Property<uint32>& return_value)
{
    using namespace solarflare;

    if (NVContext.null)
    {
        PROVIDER_LOG_ERR("%s(): NV context "
                         "should be specified",
                         __FUNCTION__);
        return_value.set(InvalidParameter);
        return INVOKE_METHOD_OK;
    }

    if (solarflare::System::target.NVClose(NVContext.value) < 0)
        return_value.set(Error);
    else
        return_value.set(OK);

    return INVOKE_METHOD_OK;
}

Invoke_Method_Status SF_NICCard_Provider::NVPartSize(
    const SF_NICCard* self,
    const Property<uint32>& NVContext,
    Property<uint64>& PartSize,
    Property<uint32>& return_value)
{
    using namespace solarflare;

    uint64 part_size;

    if (NVContext.null)
    {
        PROVIDER_LOG_ERR("%s(): NV context "
                         "should be specified",
                         __FUNCTION__);
        return_value.set(InvalidParameter);
        return INVOKE_METHOD_OK;
    }

    part_size = solarflare::System::target.NVPartSize(NVContext.value);

    PartSize.null = false;
    PartSize.value = part_size;
    return_value.set(OK);

    return INVOKE_METHOD_OK;
}

Invoke_Method_Status SF_NICCard_Provider::NVRead(
    const SF_NICCard* self,
    const Property<uint32>& NVContext,
    const Property<uint64>& Length,
    const Property<sint64>& Offset,
    Property<String>& Data,
    Property<uint32>& return_value)
{
    using namespace solarflare;

    int rc;

    if (NVContext.null || Length.null || Offset.null)
    {
        PROVIDER_LOG_ERR("%s(): some parameters "
                         "are missed",
                         __FUNCTION__);
        return_value.set(InvalidParameter);
        return INVOKE_METHOD_OK;
    }

    rc = solarflare::System::target.NVRead(NVContext.value,
                                           Length.value,
                                           Offset.value,
                                           Data.value);

    if (rc >= 0)
    {
        Data.null = false;
        return_value.set(OK);
    }
    else
        return_value.set(Error);

    return INVOKE_METHOD_OK;
}

Invoke_Method_Status SF_NICCard_Provider::NVReadAll(
    const SF_NICCard* self,
    const Property<uint32>& NVContext,
    Property<String>& Data,
    Property<uint32>& return_value)
{
    using namespace solarflare;

    int rc;

    if (NVContext.null)
    {
        PROVIDER_LOG_ERR("%s(): some parameters "
                         "are missed",
                         __FUNCTION__);
        return_value.set(InvalidParameter);
        return INVOKE_METHOD_OK;
    }

    rc = solarflare::System::target.NVReadAll(NVContext.value,
                                              Data.value);

    if (rc >= 0)
    {
        Data.null = false;
        return_value.set(OK);
    }
    else
        return_value.set(Error);

    return INVOKE_METHOD_OK;
}

Invoke_Method_Status SF_NICCard_Provider::NVWriteAll(
    const SF_NICCard* self,
    const Property<uint32>& NVContext,
    const Property<String>& Data,
    Property<uint32>& return_value)
{
    using namespace solarflare;

    int rc;

    if (NVContext.null)
    {
        PROVIDER_LOG_ERR("%s(): some parameters "
                         "are missed",
                         __FUNCTION__);
        return_value.set(InvalidParameter);
        return INVOKE_METHOD_OK;
    }

    rc = solarflare::System::target.NVWriteAll(NVContext.value,
                                               Data.value);

    if (rc >= 0)
        return_value.set(OK);
    else
        return_value.set(Error);

    return INVOKE_METHOD_OK;
}

/*@END@*/

CIMPLE_NAMESPACE_END
