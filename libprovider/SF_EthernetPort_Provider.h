/***************************************************************************//*! \file liprovider/SF_EthernetPort_Provider.h
** <L5_PRIVATE L5_SOURCE>
** \author  OktetLabs
**  \brief  CIM Provider
**   \date  2013/10/02
**    \cop  (c) Solarflare Communications Inc.
** </L5_PRIVATE>
*//*
\**************************************************************************/

// Generated by genprov 2.0.24
#ifndef _SF_EthernetPort_Provider_h
#define _SF_EthernetPort_Provider_h

#include <cimple/cimple.h>
#include "SF_EthernetPort.h"
#include "sf_provider.h"

CIMPLE_NAMESPACE_BEGIN

class SF_EthernetPort_Provider
{
    class SpeedChanger : public solarflare::Action 
    {
        solarflare::Port::Speed reqSpeed;
        bool ok;
    protected:
        virtual void handler(solarflare::SystemElement& se, unsigned);
    public:
        SpeedChanger(solarflare::Port::Speed rs,
                     const Instance *inst) :
            solarflare::Action(inst), reqSpeed(rs), ok(false) {}
        bool isOk() const { return ok; }
    };

#if CIM_SCHEMA_VERSION_MINOR > 0
    class StateChanger : public solarflare::Action 
    {
        unsigned reqState;
        bool ok;
    protected:
        virtual void handler(solarflare::SystemElement& se, unsigned);
    public:
        StateChanger(unsigned rs, const Instance *inst) :
            solarflare::Action(inst), reqState(rs), ok(false) {}
        bool isOk() const { return ok; }
    };
#endif
public:
    typedef SF_EthernetPort Class;

    SF_EthernetPort_Provider();

    ~SF_EthernetPort_Provider();

    Load_Status load();

    Unload_Status unload();

    Get_Instance_Status get_instance(
        const SF_EthernetPort* model,
        SF_EthernetPort*& instance);

    Enum_Instances_Status enum_instances(
        const SF_EthernetPort* model,
        Enum_Instances_Handler<SF_EthernetPort>* handler);

    Create_Instance_Status create_instance(
        SF_EthernetPort* instance);

    Delete_Instance_Status delete_instance(
        const SF_EthernetPort* instance);

    Modify_Instance_Status modify_instance(
        const SF_EthernetPort* model,
        const SF_EthernetPort* instance);

    Invoke_Method_Status RequestStateChange(
        const SF_EthernetPort* self,
        const Property<uint16>& RequestedState,
        CIM_ConcreteJob*& Job,
        const Property<Datetime>& TimeoutPeriod,
        Property<uint32>& return_value);

    Invoke_Method_Status SetPowerState(
        const SF_EthernetPort* self,
        const Property<uint16>& PowerState,
        const Property<Datetime>& Time,
        Property<uint32>& return_value);

    Invoke_Method_Status Reset(
        const SF_EthernetPort* self,
        Property<uint32>& return_value);

    Invoke_Method_Status EnableDevice(
        const SF_EthernetPort* self,
        const Property<boolean>& Enabled,
        Property<uint32>& return_value);

    Invoke_Method_Status OnlineDevice(
        const SF_EthernetPort* self,
        const Property<boolean>& Online,
        Property<uint32>& return_value);

    Invoke_Method_Status QuiesceDevice(
        const SF_EthernetPort* self,
        const Property<boolean>& Quiesce,
        Property<uint32>& return_value);

    Invoke_Method_Status SaveProperties(
        const SF_EthernetPort* self,
        Property<uint32>& return_value);

    Invoke_Method_Status RestoreProperties(
        const SF_EthernetPort* self,
        Property<uint32>& return_value);

#if defined(TARGET_CIM_SERVER_esxi) || defined(TARGET_CIM_SERVER_esxi_native)
    Invoke_Method_Status GetPrivileges(
        const SF_EthernetPort* self,
        const Property<uint32> &PhysicalFunction,
        const Property<uint32> &VirtualFunction,
        Property<Array_String>& PrivilegeNames,
        Property<Array_uint32>& Privileges,
        Property<uint32>& return_value);

    Invoke_Method_Status ModifyPrivileges(
        const SF_EthernetPort* self,
        const Property<uint32> &PhysicalFunction,
        const Property<uint32> &VirtualFunction,
        const Property<String>& AddedMask,
        const Property<String>& RemovedMask,
        Property<uint32>& return_value);

    Invoke_Method_Status GetIntrModeration(
        const SF_EthernetPort* self,
        const Property<Array_String>& ParamNames,
        Property<Array_uint32>& ParamValues,
        Property<uint32>& return_value);

    Invoke_Method_Status SetIntrModeration(
        const SF_EthernetPort* self,
        const Property<Array_String>& ParamNames,
        const Property<Array_uint32>& ParamValues,
        Property<uint32>& return_value);
#endif
    /*@END@*/
};

CIMPLE_NAMESPACE_END

#endif /* _SF_EthernetPort_Provider_h */
