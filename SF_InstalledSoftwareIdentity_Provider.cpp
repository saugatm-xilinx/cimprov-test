// Generated by genprov 2.0.24
#include "SF_InstalledSoftwareIdentity_Provider.h"
#include "SF_SoftwareIdentity.h"
#include "SF_SoftwareIdentity_Provider.h"

CIMPLE_NAMESPACE_BEGIN

SF_InstalledSoftwareIdentity_Provider::SF_InstalledSoftwareIdentity_Provider()
{
}

SF_InstalledSoftwareIdentity_Provider::~SF_InstalledSoftwareIdentity_Provider()
{
}

Load_Status SF_InstalledSoftwareIdentity_Provider::load()
{
    return LOAD_OK;
}

Unload_Status SF_InstalledSoftwareIdentity_Provider::unload()
{
    return UNLOAD_OK;
}

const CIM_ComputerSystem *SF_InstalledSoftwareIdentity_Provider::findSystem()
{
    static const char * const namespaces[] = 
    {"root/ibmse", "root/cimv2", "root/solarflare"};
    
    if (cimSystem)
        return cast<CIM_ComputerSystem *>(cimSystem.ptr());

    Ref<CIM_ComputerSystem> system = CIM_ComputerSystem::create();
    Ref<Instance> sysInstance;
    
    for (const char * const *ns = namespaces; *ns != NULL; ns++)
    {
        Instance_Enumerator ie;

        CIMPLE_DBG(("enumerating in %s", *ns));
        if (cimom::enum_instances(*ns, system.ptr(), ie) != 0)
            continue;

        sysInstance = ie();
        if (sysInstance)
        {
            break;
        }
    }
    if (sysInstance)
    {
        cimSystem.reset(cast<CIM_ComputerSystem *>(sysInstance.ptr()));
        CIMPLE_DBG(("cimSystem refcnt = %u", cimSystem.count()));
    }
    return cimSystem.ptr();
}

Get_Instance_Status SF_InstalledSoftwareIdentity_Provider::get_instance(
    const SF_InstalledSoftwareIdentity* model,
    SF_InstalledSoftwareIdentity*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

bool SF_InstalledSoftwareIdentity_Provider::ConstEnum::process(const solarflare::SystemElement& se)
{
    if (!se.isSoftware())
        return true;
    
    const solarflare::SWElement *sw = static_cast<const solarflare::SWElement *>(&se);
    if (!sw->version().isInstalled())
        return true;
    
    SF_InstalledSoftwareIdentity *link = SF_InstalledSoftwareIdentity::create(true);

    link->System = cast<CIM_System *>(from->clone());
    SF_SoftwareIdentity *sfid = SF_SoftwareIdentity_Provider::makeReference(*sw);
    link->InstalledSoftware = cast<CIM_SoftwareIdentity *>(sfid);

    handler->handle(link);

    return true;
}

Enum_Instances_Status SF_InstalledSoftwareIdentity_Provider::enum_instances(
    const SF_InstalledSoftwareIdentity* model,
    Enum_Instances_Handler<SF_InstalledSoftwareIdentity>* handler)
{
    const CIM_ComputerSystem *cs = findSystem();
    
    if (cs == NULL)
    {
        CIMPLE_ERR(("No ComputerSystem instance found"));
        return ENUM_INSTANCES_FAILED;
    }

    CIMPLE_DBG(("### cimSystem refcnt = %u", cimSystem.count()));    
    ConstEnum installed(cs, handler);
    solarflare::System::target.enumerate(installed);

    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_InstalledSoftwareIdentity_Provider::create_instance(
    SF_InstalledSoftwareIdentity* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_InstalledSoftwareIdentity_Provider::delete_instance(
    const SF_InstalledSoftwareIdentity* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_InstalledSoftwareIdentity_Provider::modify_instance(
    const SF_InstalledSoftwareIdentity* model,
    const SF_InstalledSoftwareIdentity* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Enum_Associator_Names_Status SF_InstalledSoftwareIdentity_Provider::enum_associator_names(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associator_Names_Handler<Instance>* handler)
{
    return ENUM_ASSOCIATOR_NAMES_UNSUPPORTED;
}

Enum_Associators_Status SF_InstalledSoftwareIdentity_Provider::enum_associators(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associators_Handler<Instance>* handler)
{
    return ENUM_ASSOCIATORS_UNSUPPORTED;
}

Enum_References_Status SF_InstalledSoftwareIdentity_Provider::enum_references(
    const Instance* instance,
    const SF_InstalledSoftwareIdentity* model,
    const String& role,
    Enum_References_Handler<SF_InstalledSoftwareIdentity>* handler)
{
    return ENUM_REFERENCES_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
