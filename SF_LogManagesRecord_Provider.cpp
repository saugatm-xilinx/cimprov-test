// Generated by genprov 2.0.24
#include "SF_LogManagesRecord_Provider.h"
#include "SF_RecordLog_Provider.h"
#include "SF_DiagnosticLog_Provider.h"
#include "SF_LogEntry_Provider.h"
#include "SF_DiagnosticCompletionRecord_Provider.h"
#include "sf_platform.h"

CIMPLE_NAMESPACE_BEGIN

bool SF_LogManagesRecord_Provider::Enum::process(const solarflare::LogEntry& entry)
{
    SF_LogManagesRecord *link = SF_LogManagesRecord::create(true);

    link->Log = cast<CIM_Log *>(SF_RecordLog_Provider::makeReference(*owner));
    link->Record = cast<CIM_RecordForLog *>(SF_LogEntry_Provider::makeReference(*owner, entry));
    handler->handle(link);

    return true;
}

bool SF_LogManagesRecord_Provider::DiagEntryEnum::process(const solarflare::LogEntry& entry)
{
    SF_LogManagesRecord *link = SF_LogManagesRecord::create(true);

    link->Log = cast<CIM_Log *>(SF_DiagnosticLog_Provider::makeReference(*diag, *owner));
    link->Record = cast<CIM_RecordForLog *>(SF_DiagnosticCompletionRecord_Provider::makeReference(*diag, *owner, entry));
    handler->handle(link);

    return true;
}

bool SF_LogManagesRecord_Provider::DiagEnum::process(const solarflare::SystemElement& se)
{
    const solarflare::Diagnostic& diag = static_cast<const solarflare::Diagnostic&>(se);
    
    DiagEntryEnum entries(&diag, &diag.errorLog(), handler);
    diag.errorLog().forAllEntries(entries);
    if (&diag.okLog() != &diag.errorLog())
    {
        DiagEntryEnum okentries(&diag, &diag.okLog(), handler);
        diag.okLog().forAllEntries(okentries);
    }
    return true;
}


SF_LogManagesRecord_Provider::SF_LogManagesRecord_Provider()
{
}

SF_LogManagesRecord_Provider::~SF_LogManagesRecord_Provider()
{
}

Load_Status SF_LogManagesRecord_Provider::load()
{
    return LOAD_OK;
}

Unload_Status SF_LogManagesRecord_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_LogManagesRecord_Provider::get_instance(
    const SF_LogManagesRecord* model,
    SF_LogManagesRecord*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_LogManagesRecord_Provider::enum_instances(
    const SF_LogManagesRecord* model,
    Enum_Instances_Handler<SF_LogManagesRecord>* handler)
{
    for (unsigned i = 0; solarflare::Logger::knownLogs[i] != NULL; i++)
    {
        Enum links(solarflare::Logger::knownLogs[i], handler);
        solarflare::Logger::knownLogs[i]->forAllEntries(links);
    }
    DiagEnum diagLinks(handler);
    solarflare::System::target.forAllDiagnostics(diagLinks);

    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_LogManagesRecord_Provider::create_instance(
    SF_LogManagesRecord* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_LogManagesRecord_Provider::delete_instance(
    const SF_LogManagesRecord* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_LogManagesRecord_Provider::modify_instance(
    const SF_LogManagesRecord* model,
    const SF_LogManagesRecord* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Enum_Associator_Names_Status SF_LogManagesRecord_Provider::enum_associator_names(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associator_Names_Handler<Instance>* handler)
{
    return ENUM_ASSOCIATOR_NAMES_UNSUPPORTED;
}

Enum_Associators_Status SF_LogManagesRecord_Provider::enum_associators(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associators_Handler<Instance>* handler)
{
    return ENUM_ASSOCIATORS_UNSUPPORTED;
}

Enum_References_Status SF_LogManagesRecord_Provider::enum_references(
    const Instance* instance,
    const SF_LogManagesRecord* model,
    const String& role,
    Enum_References_Handler<SF_LogManagesRecord>* handler)
{
    return ENUM_REFERENCES_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
