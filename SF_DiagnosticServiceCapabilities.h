/*NOCHKSRC*/
//==============================================================================
//
// PLEASE DO NOT EDIT; THIS FILE WAS AUTOMATICALLY GENERATED BY GENCLASS 2.0.24
//
//==============================================================================

#ifndef _cimple_SF_DiagnosticServiceCapabilities_h
#define _cimple_SF_DiagnosticServiceCapabilities_h

#include <cimple/cimple.h>
#include "CIM_DiagnosticServiceCapabilities.h"

CIMPLE_NAMESPACE_BEGIN

// SF_DiagnosticServiceCapabilities keys:
//     InstanceID

/*[1194]*/
class SF_DiagnosticServiceCapabilities : public Instance
{
public:
    // CIM_ManagedElement features:
    Property<String> InstanceID;
    Property<String> Caption;
    Property<String> Description;
    Property<String> ElementName;
    Property<uint64> Generation;

    // CIM_Capabilities features:

    // CIM_DiagnosticServiceCapabilities features:
    struct _SupportedServiceModes
    {
        enum
        {
            enum_Unknown = 0,
            enum_Other = 1,
            enum_PercentOfTestCoverage = 2,
            enum_QuickMode = 3,
            enum_HaltOnError = 4,
            enum_ResultPersistence = 5,
            enum_QueryTimeout = 6,
            enum_NonDestructive = 7,
            enum_No_Service_Modes = 0,
        };
        Array_uint16 value;
        uint8 null;
    }
    SupportedServiceModes;
    Property<Array_String> OtherSupportedServiceModesDescriptions;
    struct _SupportedLoopControl
    {
        enum
        {
            enum_Unknown = 0,
            enum_Other = 1,
            enum_Continuous = 2,
            enum_Count = 3,
            enum_Timer = 4,
            enum_ErrorCount = 5,
            enum_No_Loop_Control = 0,
        };
        Array_uint16 value;
        uint8 null;
    }
    SupportedLoopControl;
    Property<Array_String> OtherSupportedLoopControlDescriptions;
    struct _SupportedLogOptions
    {
        enum
        {
            enum_Unknown = 0,
            enum_Other = 1,
            enum_Results = 2,
            enum_Subtests = 3,
            enum_Actions = 4,
            enum_Warnings = 5,
            enum_Status = 6,
            enum_Device_Errors = 7,
            enum_Service_Errors = 8,
            enum_Setting_Data = 9,
            enum_Statistics = 10,
            enum_Hardware_Configuration = 11,
            enum_Software_Configuration = 12,
            enum_References = 13,
            enum_Debug = 14,
            enum_No_Log_Options = 0,
        };
        Array_uint16 value;
        uint8 null;
    }
    SupportedLogOptions;
    Property<Array_String> OtherSupportedLogOptionsDescriptions;
    struct _SupportedLogStorage
    {
        enum
        {
            enum_Unknown = 0,
            enum_Other = 1,
            enum_DiagnosticLog = 2,
            enum_MessageLog = 3,
            enum_File = 4,
            enum_No_Log_Storage = 0,
        };
        Array_uint16 value;
        uint8 null;
    }
    SupportedLogStorage;
    Property<Array_String> OtherSupportedLogStorageDescriptions;
    struct _SupportedExecutionControls
    {
        enum
        {
            enum_Unknown = 0,
            enum_Other = 1,
            enum_Reserved = 2,
            enum_Kill_Job = 3,
            enum_Suspend_Job = 4,
            enum_Terminate_Job = 5,
            enum_No_Execution_Controls = 0,
        };
        Array_uint16 value;
        uint8 null;
    }
    SupportedExecutionControls;
    Property<Array_String> OtherSupportedExecutionControlsDescriptions;
    struct _SupportedTestWarnings
    {
        enum
        {
            enum_No_Warnings = 2,
            enum_Missing_Resources = 3,
            enum_Testing_Impacts = 4,
            enum_All_Warnings = 5,
        };
        uint16 value;
        uint8 null;
    }
    SupportedTestWarnings;

    // SF_DiagnosticServiceCapabilities features:

    CIMPLE_CLASS(SF_DiagnosticServiceCapabilities)
};

typedef CIM_Capabilities_CreateGoalSettings_method SF_DiagnosticServiceCapabilities_CreateGoalSettings_method;

CIMPLE_NAMESPACE_END

#endif /* _cimple_SF_DiagnosticServiceCapabilities_h */
