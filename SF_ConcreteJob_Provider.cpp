// Generated by genprov 2.0.24
#include "SF_ConcreteJob_Provider.h"

CIMPLE_NAMESPACE_BEGIN

bool SF_ConcreteJob_Provider::ThreadEnum::process(solarflare::SWElement& sw)
{
    solarflare::Thread *th = sw.installThread();
    if (th != NULL)
    {
        SF_ConcreteJob *job = SF_ConcreteJob::create(true);
        job->InstanceID.set(solarflare::System::target.prefix());
        job->InstanceID.value.append(":");
        job->InstanceID.value.append(sw.name());
        job->InstanceID.value.append(":installThread");
        job->OperationalStatus.null = false;
        job->JobState.null = false;
        switch (th->currentState())
        {
            case solarflare::Thread::NotRun:
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_Dormant);
                job->JobState.value = SF_ConcreteJob::_JobState::enum_New;
                break;
            case solarflare::Thread::Running:
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_OK);
                job->JobState.value = SF_ConcreteJob::_JobState::enum_Running;
                break;
            case solarflare::Thread::Succeeded:
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_OK);
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_Completed);
                job->JobState.value = SF_ConcreteJob::_JobState::enum_Completed;
                break;
            case solarflare::Thread::Failed:
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_Error);
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_Completed);
                job->JobState.value = SF_ConcreteJob::_JobState::enum_Exception;
                break;
            case solarflare::Thread::Aborting:
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_Error);
                job->JobState.value = SF_ConcreteJob::_JobState::enum_Shutting_Down;
                break;
            case solarflare::Thread::Aborted:
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_Error);
                job->JobState.value = SF_ConcreteJob::_JobState::enum_Killed;
                break;
        }
        job->PercentComplete.set(th->percentage());
        job->DeleteOnCompletion.set(false);
        handler->handle(job);
    }
    return true;
}

SF_ConcreteJob_Provider::SF_ConcreteJob_Provider()
{
}

SF_ConcreteJob_Provider::~SF_ConcreteJob_Provider()
{
}

Load_Status SF_ConcreteJob_Provider::load()
{
    return LOAD_OK;
}

Unload_Status SF_ConcreteJob_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_ConcreteJob_Provider::get_instance(
    const SF_ConcreteJob* model,
    SF_ConcreteJob*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_ConcreteJob_Provider::enum_instances(
    const SF_ConcreteJob* model,
    Enum_Instances_Handler<SF_ConcreteJob>* handler)
{
    ThreadEnum threads(handler);
    solarflare::System::target.forAllSoftware(threads);
    
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_ConcreteJob_Provider::create_instance(
    SF_ConcreteJob* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_ConcreteJob_Provider::delete_instance(
    const SF_ConcreteJob* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_ConcreteJob_Provider::modify_instance(
    const SF_ConcreteJob* model,
    const SF_ConcreteJob* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Invoke_Method_Status SF_ConcreteJob_Provider::KillJob(
    const SF_ConcreteJob* self,
    const Property<boolean>& DeleteOnKill,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_ConcreteJob_Provider::RequestStateChange(
    const SF_ConcreteJob* self,
    const Property<uint16>& RequestedState,
    const Property<Datetime>& TimeoutPeriod,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_OK;
}

Invoke_Method_Status SF_ConcreteJob_Provider::GetError(
    const SF_ConcreteJob* self,
    CIM_Error*& Error,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
