// Generated by genprov 2.0.24
#include "SF_ConcreteJob_Provider.h"

CIMPLE_NAMESPACE_BEGIN

SF_ConcreteJob *SF_ConcreteJob_Provider::makeReference(const solarflare::SystemElement& obj,
                                                       const char *suffix)
{
    SF_ConcreteJob *job = SF_ConcreteJob::create(true);
    job->InstanceID.set(solarflare::System::target.prefix());
    job->InstanceID.value.append(":");
    job->InstanceID.value.append(obj.name());
    job->InstanceID.value.append(":");
    job->InstanceID.value.append(suffix);
    return job;
}

void SF_ConcreteJob_Provider::ThreadEnum::processThread(solarflare::Thread *th,
                                                        const solarflare::SystemElement& obj,
                                                        const char *suffix) const 
{
    SF_ConcreteJob *job = makeReference(obj, suffix);
    
    job->OperationalStatus.null = false;
    job->JobState.null = false;
    switch (th->currentState())
    {
            case solarflare::Thread::NotRun:
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_Dormant);
                job->JobState.value = SF_ConcreteJob::_JobState::enum_New;
                break;
            case solarflare::Thread::Running:
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_OK);
                job->JobState.value = SF_ConcreteJob::_JobState::enum_Running;
                break;
            case solarflare::Thread::Succeeded:
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_OK);
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_Completed);
                job->JobState.value = SF_ConcreteJob::_JobState::enum_Completed;
                break;
            case solarflare::Thread::Failed:
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_Error);
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_Completed);
                job->JobState.value = SF_ConcreteJob::_JobState::enum_Exception;
                break;
            case solarflare::Thread::Aborting:
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_Error);
                job->JobState.value = SF_ConcreteJob::_JobState::enum_Shutting_Down;
                break;
            case solarflare::Thread::Aborted:
                job->OperationalStatus.value.append(SF_ConcreteJob::_OperationalStatus::enum_Error);
                job->JobState.value = SF_ConcreteJob::_JobState::enum_Killed;
                break;
        }
        job->PercentComplete.set(th->percentage());
        job->DeleteOnCompletion.set(false);
        handler->handle(job);
    }

bool SF_ConcreteJob_Provider::ThreadEnum::process(solarflare::SWElement& sw)
{
    solarflare::Thread *th = sw.installThread();
    if (th != NULL)
        processThread(th, sw, "installThread");
    return true;
}

bool SF_ConcreteJob_Provider::ThreadEnum::process(solarflare::Diagnostic& diag)
{
    solarflare::Thread *th = diag.asyncThread();
    if (th != NULL)
        processThread(th, diag, "diagThread");
    return true;
}

bool SF_ConcreteJob_Provider::JobFinder::process(solarflare::SWElement& sw)
{
    String tmp = sw.name();
    tmp.append(":installThread");
    if (tmp == jobId)
    {
        th = sw.installThread();
        return false;
    }
    return true;
}

bool SF_ConcreteJob_Provider::JobFinder::process(solarflare::Diagnostic& diag)
{
    String tmp = diag.name();
    tmp.append(":diagThread");
    if (tmp == jobId)
    {
        th = diag.asyncThread();
        return false;
    }
    return true;
}


solarflare::Thread *SF_ConcreteJob_Provider::findByInstance(const SF_ConcreteJob& job)
{
    String prefix = solarflare::System::target.prefix();
    prefix.append(":");
    
    if (job.InstanceID.null)
        return NULL;

    if (job.InstanceID.value.find(prefix) != 0)
        return NULL;

    String tmp = job.InstanceID.value;
    JobFinder finder(tmp.substr(prefix.size()));
    
    if (solarflare::System::target.forAllSoftware(finder))
        solarflare::System::target.forAllDiagnostics(finder);
    return finder.found();
}


SF_ConcreteJob_Provider::SF_ConcreteJob_Provider()
{
}

SF_ConcreteJob_Provider::~SF_ConcreteJob_Provider()
{
}

Load_Status SF_ConcreteJob_Provider::load()
{
    return LOAD_OK;
}

Unload_Status SF_ConcreteJob_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_ConcreteJob_Provider::get_instance(
    const SF_ConcreteJob* model,
    SF_ConcreteJob*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_ConcreteJob_Provider::enum_instances(
    const SF_ConcreteJob* model,
    Enum_Instances_Handler<SF_ConcreteJob>* handler)
{
    ThreadEnum threads(handler);
    solarflare::System::target.forAllSoftware(threads);
    solarflare::System::target.forAllDiagnostics(threads);
    
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_ConcreteJob_Provider::create_instance(
    SF_ConcreteJob* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_ConcreteJob_Provider::delete_instance(
    const SF_ConcreteJob* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_ConcreteJob_Provider::modify_instance(
    const SF_ConcreteJob* model,
    const SF_ConcreteJob* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Invoke_Method_Status SF_ConcreteJob_Provider::KillJob(
    const SF_ConcreteJob* self,
    const Property<boolean>& DeleteOnKill,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_ConcreteJob_Provider::RequestStateChange(
    const SF_ConcreteJob* self,
    const Property<uint16>& RequestedState,
    const Property<Datetime>& TimeoutPeriod,
    Property<uint32>& return_value)
{
    // CIMPLE is unable to generate enums for method parameters
    enum ReturnValue 
    {
        OK = 0,
        Error = 2,
        InvalidParameter = 5,
        BadTimeout = 4098,
    };
    enum RequestedStateValue
    {
        Terminate = 4,
        Kill = 5,
    };
    solarflare::Thread *thr = findByInstance(*self);
    if (thr == NULL || RequestedState.null)
    {
        return_value.set(InvalidParameter);
    }
    else if (!TimeoutPeriod.null && !(TimeoutPeriod.value == Datetime()))
    {
        return_value.set(BadTimeout);
    }
    else
    {
        return_value.set(OK);
        switch (RequestedState.value)
        {
            case Terminate:
            case Kill:
                thr->stop();
                break;
            default:
                return_value.set(InvalidParameter);
        }
    }

    return INVOKE_METHOD_OK;
}

Invoke_Method_Status SF_ConcreteJob_Provider::GetError(
    const SF_ConcreteJob* self,
    CIM_Error*& Error,
    Property<uint32>& return_value)
{
    // CIMPLE is unable to generate enums for method parameters
    enum ReturnValue 
    {
        OK = 0,
        Failed = 4,
    };
    solarflare::Thread *thr = findByInstance(*self);
    if (thr == NULL)
    {
        return_value.set(Failed);
    }
    else
    {
        return_value.set(OK);
        switch (thr->currentState())
        {
            case solarflare::Thread::Failed:
            case solarflare::Thread::Aborting:
            case solarflare::Thread::Aborted:
                Error = CIM_Error::create(true);
                Error->ErrorType.null = false;
                Error->ErrorType.value = CIM_Error::_ErrorType::enum_Unknown;
                break;
            default:
                /* nothing */
                break;
        }
    }
    
    return INVOKE_METHOD_OK;
}

/*@END@*/

CIMPLE_NAMESPACE_END
