// Generated by genprov 2.0.24
#include "SF_EthernetPort_Provider.h"
#include "SF_ComputerSystem_Provider.h"
#include "SF_Sysinfo.h"

CIMPLE_NAMESPACE_BEGIN

SF_EthernetPort *SF_EthernetPort_Provider::makeReference(const solarflare::Port& p)
{
    const CIM_ComputerSystem *system = SF_ComputerSystem_Provider::findSystem();
    SF_EthernetPort *newPort = SF_EthernetPort::create(true);
    
    newPort->CreationClassName.set("SF_EthernetPort");
    newPort->DeviceID.set(p.ifName());
    newPort->SystemCreationClassName.set(system->CreationClassName.value);
    newPort->SystemName.set(system->CreationClassName.value);
    return newPort;
}


bool SF_EthernetPort_Provider::PortEnum::process(const solarflare::Port& p)
{
    SF_EthernetPort *newPort = makeReference(p);

    newPort->Description.set(p.description());
    newPort->ElementName.set(p.ifName());
    newPort->Name.set(p.name());
    newPort->InstanceID.set(solarflare::System::target.prefix());
    newPort->InstanceID.value.append(":");
    newPort->InstanceID.value.append(p.name());
    newPort->EnabledState.null = false;
    newPort->EnabledState.value = (p.ifStatus() ?
                                   (p.linkStatus() ? 
                                    SF_EthernetPort::_EnabledState::enum_Enabled : 
                                    SF_EthernetPort::_EnabledState::enum_Enabled_but_Offline) :
                                   SF_EthernetPort::_EnabledState::enum_Disabled);
    newPort->RequestedState.null = false;
    newPort->RequestedState.value = SF_EthernetPort::_RequestedState::enum_Not_Applicable;
    newPort->StatusInfo.null = false;
    newPort->StatusInfo.value = (p.ifStatus() ?
                                 SF_EthernetPort::_StatusInfo::enum_Enabled :
                                 SF_EthernetPort::_StatusInfo::enum_Disabled);
    // The following is a hack. The point is that PortType variable is
    // defined in one CIM class (CIM_LogicalPort) but the set of useful
    // values is defined in another class (CIM_EthernetPort). CIMPLE tools
    // are unable to handle this properly, so do not generate the correct
    // enumeration even with -e option
#define quasi_enum_10GBaseT 55
    newPort->PortType.null = false;
    switch (p.nic()->connector())
    {
        case solarflare::NIC::RJ45:
            newPort->PortType.value = quasi_enum_10GBaseT;
            break;
        case solarflare::NIC::SFPPlus:
            newPort->PortType.value = SF_EthernetPort::_PortType::enum_Other;
            newPort->OtherNetworkPortType.set("10GBase-CR (SFP+)");
            break;
        case solarflare::NIC::Mezzanine:
            newPort->PortType.value = SF_EthernetPort::_PortType::enum_Other;
            newPort->OtherNetworkPortType.set("10GBase-KR");
            break;
        default:
            newPort->PortType.value = SF_EthernetPort::_PortType::enum_Unknown;
            break;
    }
    newPort->PortNumber.set(p.elementId());
    newPort->LinkTechnology.null = false;
    newPort->LinkTechnology.value = SF_EthernetPort::_LinkTechnology::enum_Ethernet;
    newPort->PermanentAddress.set(p.permanentMAC().string());
    newPort->NetworkAddresses.null = false;
    newPort->NetworkAddresses.value.append(p.currentMAC().string());
    newPort->FullDuplex.set(p.fullDuplex());
    newPort->AutoSense.set(p.autoneg());
    newPort->SupportedMaximumTransmissionUnit.set(p.nic()->supportedMtu());
    newPort->ActiveMaximumTransmissionUnit.set(p.mtu());
    newPort->Speed.set(p.linkSpeed());
    newPort->MaxSpeed.set(p.nic()->maxLinkSpeed());

    handler->handle(newPort);
    
    return true;
}

SF_EthernetPort_Provider::SF_EthernetPort_Provider()
{
}

SF_EthernetPort_Provider::~SF_EthernetPort_Provider()
{
}

Load_Status SF_EthernetPort_Provider::load()
{
    return LOAD_OK;
}

Unload_Status SF_EthernetPort_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_EthernetPort_Provider::get_instance(
    const SF_EthernetPort* model,
    SF_EthernetPort*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_EthernetPort_Provider::enum_instances(
    const SF_EthernetPort* model,
    Enum_Instances_Handler<SF_EthernetPort>* handler)
{
    PortEnum ports(handler);
    solarflare::System::target.forAllPorts(ports);
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_EthernetPort_Provider::create_instance(
    SF_EthernetPort* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_EthernetPort_Provider::delete_instance(
    const SF_EthernetPort* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_EthernetPort_Provider::modify_instance(
    const SF_EthernetPort* model,
    const SF_EthernetPort* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Invoke_Method_Status SF_EthernetPort_Provider::RequestStateChange(
    const SF_EthernetPort* self,
    const Property<uint16>& RequestedState,
    CIM_ConcreteJob*& Job,
    const Property<Datetime>& TimeoutPeriod,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_EthernetPort_Provider::SetPowerState(
    const SF_EthernetPort* self,
    const Property<uint16>& PowerState,
    const Property<Datetime>& Time,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_EthernetPort_Provider::Reset(
    const SF_EthernetPort* self,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_EthernetPort_Provider::EnableDevice(
    const SF_EthernetPort* self,
    const Property<boolean>& Enabled,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_EthernetPort_Provider::OnlineDevice(
    const SF_EthernetPort* self,
    const Property<boolean>& Online,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_EthernetPort_Provider::QuiesceDevice(
    const SF_EthernetPort* self,
    const Property<boolean>& Quiesce,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_EthernetPort_Provider::SaveProperties(
    const SF_EthernetPort* self,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_EthernetPort_Provider::RestoreProperties(
    const SF_EthernetPort* self,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
