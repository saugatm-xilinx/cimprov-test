// Generated by genprov 2.0.24
#include "SF_ConnectorRealizesPort_Provider.h"
#include "SF_EthernetPort_Provider.h"
#include "SF_PhysicalConnector_Provider.h"
#include "sf_provider.h"

CIMPLE_NAMESPACE_BEGIN

bool SF_ConnectorRealizesPort_Provider::InterfaceEnum::process(const solarflare::SystemElement& se)
{
    const solarflare::Interface& intf = static_cast<const solarflare::Interface&>(se);
    
    const solarflare::Port *port = intf.port();
    if (port != NULL)
    {
        SF_ConnectorRealizesPort* link = SF_ConnectorRealizesPort::create(true);
        
        link->Antecedent = cast<CIM_PhysicalElement *>(port->cimReference(SF_PhysicalConnector::static_meta_class));
        link->Dependent = cast<CIM_LogicalDevice *>(intf.cimReference(SF_EthernetPort::static_meta_class));
        handler->handle(link);
    }
    return true;
}

SF_ConnectorRealizesPort_Provider::SF_ConnectorRealizesPort_Provider()
{
}

SF_ConnectorRealizesPort_Provider::~SF_ConnectorRealizesPort_Provider()
{
}

Load_Status SF_ConnectorRealizesPort_Provider::load()
{
    solarflare::System::target.initialize();
    return LOAD_OK;
}

Unload_Status SF_ConnectorRealizesPort_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_ConnectorRealizesPort_Provider::get_instance(
    const SF_ConnectorRealizesPort* model,
    SF_ConnectorRealizesPort*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_ConnectorRealizesPort_Provider::enum_instances(
    const SF_ConnectorRealizesPort* model,
    Enum_Instances_Handler<SF_ConnectorRealizesPort>* handler)
{
    InterfaceEnum links(handler);
    
    solarflare::System::target.forAllInterfaces(links);
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_ConnectorRealizesPort_Provider::create_instance(
    SF_ConnectorRealizesPort* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_ConnectorRealizesPort_Provider::delete_instance(
    const SF_ConnectorRealizesPort* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_ConnectorRealizesPort_Provider::modify_instance(
    const SF_ConnectorRealizesPort* model,
    const SF_ConnectorRealizesPort* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Enum_Associator_Names_Status SF_ConnectorRealizesPort_Provider::enum_associator_names(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associator_Names_Handler<Instance>* handler)
{
    return ENUM_ASSOCIATOR_NAMES_UNSUPPORTED;
}

Enum_Associators_Status SF_ConnectorRealizesPort_Provider::enum_associators(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associators_Handler<Instance>* handler)
{
    return ENUM_ASSOCIATORS_UNSUPPORTED;
}

Enum_References_Status SF_ConnectorRealizesPort_Provider::enum_references(
    const Instance* instance,
    const SF_ConnectorRealizesPort* model,
    const String& role,
    Enum_References_Handler<SF_ConnectorRealizesPort>* handler)
{
    return ENUM_REFERENCES_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
