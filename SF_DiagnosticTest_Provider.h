// Generated by genprov 2.0.24
#ifndef _SF_DiagnosticTest_Provider_h
#define _SF_DiagnosticTest_Provider_h

#include <cimple/cimple.h>
#include "SF_DiagnosticTest.h"
#include "sf_platform.h"

CIMPLE_NAMESPACE_BEGIN

class SF_DiagnosticTest_Provider
{
    class Enum : public solarflare::ConstDiagnosticEnumerator {
        Enum_Instances_Handler<SF_DiagnosticTest>* handler;
    public:
        Enum(Enum_Instances_Handler<SF_DiagnosticTest>* h) :
            handler(h) {}
        virtual bool process(const solarflare::Diagnostic& diag);
    };
public:
    static SF_DiagnosticTest *makeReference(const solarflare::Diagnostic& diag);

    class DiagnosticFinder : public solarflare::DiagnosticEnumerator 
    {
        solarflare::Diagnostic *obj;
        String diagId;
    public:
        DiagnosticFinder(const String& id) :
            obj(NULL), diagId(id) {};
        virtual bool process(solarflare::Diagnostic& diag);
        solarflare::Diagnostic *found() const { return obj; }
            
    };

    static solarflare::Diagnostic *findByInstance(const SF_DiagnosticTest& instance);

    typedef SF_DiagnosticTest Class;

    SF_DiagnosticTest_Provider();

    ~SF_DiagnosticTest_Provider();

    Load_Status load();

    Unload_Status unload();

    Get_Instance_Status get_instance(
        const SF_DiagnosticTest* model,
        SF_DiagnosticTest*& instance);

    Enum_Instances_Status enum_instances(
        const SF_DiagnosticTest* model,
        Enum_Instances_Handler<SF_DiagnosticTest>* handler);

    Create_Instance_Status create_instance(
        SF_DiagnosticTest* instance);

    Delete_Instance_Status delete_instance(
        const SF_DiagnosticTest* instance);

    Modify_Instance_Status modify_instance(
        const SF_DiagnosticTest* model,
        const SF_DiagnosticTest* instance);

    Invoke_Method_Status RequestStateChange(
        const SF_DiagnosticTest* self,
        const Property<uint16>& RequestedState,
        CIM_ConcreteJob*& Job,
        const Property<Datetime>& TimeoutPeriod,
        Property<uint32>& return_value);

    Invoke_Method_Status StartService(
        const SF_DiagnosticTest* self,
        Property<uint32>& return_value);

    Invoke_Method_Status StopService(
        const SF_DiagnosticTest* self,
        Property<uint32>& return_value);

    Invoke_Method_Status RunDiagnostic(
        const SF_DiagnosticTest* self,
        const CIM_ManagedElement* ManagedElement,
        const CIM_DiagnosticSetting* DiagSetting,
        const CIM_JobSettingData* JobSetting,
        CIM_ConcreteJob*& Job,
        Property<uint32>& return_value);

    Invoke_Method_Status RunDiagnosticService(
        const SF_DiagnosticTest* self,
        const CIM_ManagedElement* ManagedElement,
        const CIM_DiagnosticSettingData* DiagnosticSettings,
        const CIM_JobSettingData* JobSettings,
        CIM_ConcreteJob*& Job,
        Property<uint32>& return_value);

    Invoke_Method_Status RunTest(
        const SF_DiagnosticTest* self,
        const CIM_ManagedSystemElement* SystemElement,
        const CIM_DiagnosticSetting* Setting,
        CIM_DiagnosticResult*& Result,
        Property<uint32>& return_value);

    Invoke_Method_Status ClearResults(
        const SF_DiagnosticTest* self,
        const CIM_ManagedSystemElement* SystemElement,
        Property<Array_String>& ResultsNotCleared,
        Property<uint32>& return_value);

    Invoke_Method_Status DiscontinueTest(
        const SF_DiagnosticTest* self,
        const CIM_ManagedSystemElement* SystemElement,
        const CIM_DiagnosticResult* Result,
        Property<boolean>& TestingStopped,
        Property<uint32>& return_value);

    /*@END@*/
};

CIMPLE_NAMESPACE_END

#endif /* _SF_DiagnosticTest_Provider_h */
