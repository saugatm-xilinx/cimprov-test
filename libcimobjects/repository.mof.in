m4_changequote([[,]])m4_dnl
m4_ifelse(TARGET_CIM_SERVER, [[wmi]],
[[m4_define([[INSTANCE]], [[ [dynamic, provider("PROVIDER_LIBRARY")] ]])m4_dnl
m4_define([[ASSOCIATION]], [[INSTANCE]])m4_dnl
m4_define([[INDICATION]], [[ [dynamic, provider("PROVIDER_LIBRARY"), Indication] ]])m4_dnl
m4_define([[INSTANCE_NWMI]], [[]])m4_dnl
m4_define([[ASSOCIATION_NWMI]], [[]])m4_dnl
m4_define([[INDICATION_NWMI]], [[]])m4_dnl
]], [[m4_define([[INSTANCE]], [[]])m4_dnl
m4_define([[ASSOCIATION]], [[ [Association] ]])m4_dnl
m4_define([[INDICATION]], [[ [Indication] ]])m4_dnl
m4_define([[INSTANCE_NWMI]], [[]])m4_dnl
m4_define([[ASSOCIATION_NWMI]], [[ [Association] ]])m4_dnl
m4_define([[INDICATION_NWMI]], [[ [Indication] ]])m4_dnl
]])m4_dnl
m4_define([[WMIONLY]], [[m4_ifelse(TARGET_CIM_SERVER, [[wmi]], [[$1]])]])m4_dnl
m4_define([[ESXICOMMON]], [[m4_ifelse(TARGET_CIM_SERVER, [[esxi]], [[$1]], TARGET_CIM_SERVER, [[esxi_native]],[[$1]],[[$2]])]])m4_dnl
m4_ifdef([[IMPNS]], [[m4_define([[ROOT_OR_IMPNS]])]])m4_dnl
m4_ifdef([[ROOTNS]], [[m4_define([[ROOT_OR_IMPNS]])]])m4_dnl
m4_ifdef([[IMPNS]], [[m4_define([[INTEROP_OR_IMPNS]])]])m4_dnl
m4_ifdef([[INTEROPNS]], [[m4_define([[INTEROP_OR_IMPNS]])]])m4_dnl
m4_define([[SECTION]], [[m4_ifdef([[$1NS]], [[// [[$1NS]]
$2]])]])m4_dnl
m4_define([[IMP_SECTION]], [[SECTION([[IMP]], [[$1]])]])m4_dnl
m4_define([[ROOT_SECTION]], [[SECTION([[ROOT_OR_IMP]], [[$1]])]])m4_dnl
m4_define([[INTEROP_SECTION]], [[SECTION([[INTEROP_OR_IMP]], [[$1]])]])m4_dnl
m4_define([[WMIONLYKEY]], [[WMIONLY([[, Key]])]])m4_dnl

IMP_SECTION([[
INSTANCE
class SF_SoftwareIdentity : CIM_SoftwareIdentity {
};

INSTANCE
class SF_DriverSoftwareIdentity : SF_SoftwareIdentity {
ESXICOMMON([[
    uint32 GetDriverLoadParameters([OUT] string LoadParameters);

    uint32 SetDriverLoadParameters([IN] string LoadParameters);
]])
};

INSTANCE
class SF_ToolSoftwareIdentity : SF_SoftwareIdentity {
};

INSTANCE
class SF_LibrarySoftwareIdentity : SF_SoftwareIdentity {
};

INSTANCE
class SF_PackageSoftwareIdentity : SF_SoftwareIdentity {
};

INSTANCE
class SF_FirmwareSoftwareIdentity : SF_SoftwareIdentity {
};

INSTANCE
class SF_DiagnosticSoftwareIdentity : SF_SoftwareIdentity {
};

INSTANCE
class SF_ConcreteJob : CIM_ConcreteJob {
};
]])

ROOT_SECTION([[
ASSOCIATION
class SF_InstalledSoftwareIdentity : CIM_InstalledSoftwareIdentity {
};
]])

ROOT_SECTION([[
ASSOCIATION_NWMI
class SF_ElementSoftwareIdentity : CIM_ElementSoftwareIdentity {
WMIONLY([[
    [Override ( "Antecedent" ), Key]
   CIM_SoftwareIdentity REF Antecedent;
]])
      [Override("Dependent")
      WMIONLYKEY
      ]
   CIM_ManagedSystemElement REF Dependent;
};

ASSOCIATION
class SF_SystemSoftwareIdentity : SF_ElementSoftwareIdentity {
WMIONLY([[
    [Override ( "Antecedent" ), Key]
   CIM_SoftwareIdentity REF Antecedent;
]])
      [Override("Dependent")
      WMIONLYKEY
      ]
   CIM_System REF Dependent;
};
]])

IMP_SECTION([[
ASSOCIATION
class SF_ControllerSoftwareIdentity : SF_ElementSoftwareIdentity {
WMIONLY([[
    [Override ( "Antecedent" ), Key]
   CIM_SoftwareIdentity REF Antecedent;
]])
      [Override("Dependent")
      WMIONLYKEY
      ]
   CIM_PortController REF Dependent;
};

ASSOCIATION
class SF_DiagElementSoftwareIdentity : SF_ElementSoftwareIdentity {
WMIONLY([[
    [Override ( "Antecedent" ), Key]
   CIM_SoftwareIdentity REF Antecedent;
]])
      [Override("Dependent")
      WMIONLYKEY
      ]
   CIM_DiagnosticTest REF Dependent;
};

ASSOCIATION_NWMI
class SF_OrderedComponent : CIM_OrderedComponent {
      [Override("GroupComponent")
      WMIONLYKEY
]
   CIM_ManagedSystemElement REF GroupComponent;
      [Override("PartComponent")
      WMIONLYKEY
]
   CIM_ManagedSystemElement REF PartComponent;
};

ASSOCIATION
class SF_BundleComponent : SF_OrderedComponent {
      [Override("GroupComponent")
      WMIONLYKEY
]
   CIM_SoftwareIdentity REF GroupComponent;
      [Override("PartComponent")
      WMIONLYKEY
]
   CIM_SoftwareIdentity REF PartComponent;
};

INSTANCE
class SF_ComputerSystem : CIM_ComputerSystem {
};

INSTANCE_NWMI
class SF_Card : CIM_Card {
WMIONLY([[
    [Read,Key : DisableOverride,Override("CreationClassName")] string CreationClassName;
    [Read,Key : DisableOverride,Override("Tag")] string Tag;
]])
};

ESXICOMMON([[
INSTANCE
class SF_API : CIM_ManagedElement {
    [Override("ElementName"), Key] string ElementName;

    uint32 GetFuncPrivileges([IN] uint32 PhysicalFunction,
                             [IN] uint32 VirtualFunction,
                             [IN] string PCIAddr,
                             [IN] string CallingDev,
                             [OUT,ArrayType("Indexed")] string PrivilegeNames[],
                             [OUT,ArrayType("Indexed")] uint32 Privileges[]);

    uint32 ModifyFuncPrivileges([IN] uint32 PhysicalFunction,
                                [IN] uint32 VirtualFunction,
                                [IN] string PCIAddr,
                                [IN] string CallingDev,
                                [IN] string AddedMask,
                                [IN] string RemovedMask);
};

ESXICOMMON([[
INSTANCE
class SF_NVAPI : CIM_ManagedElement {
    [Override("ElementName"), Key] string ElementName;

    uint32 getSFUDevices([OUT] string Devices);

    uint32 NVExists([IN] string Device,
                    [IN] uint32 Type,
                    [IN] uint32 Subtype,
                    [IN] boolean TryOtherDevs,
                    [OUT] boolean Exists,
                    [OUT] string CorrectDevice);

    uint32 NVOpen([IN] string Device,
                  [IN] uint32 Type,
                  [IN] uint32 Subtype,
                  [OUT] uint32 NVContext);

    uint32 NVClose([IN] uint32 NVContext);

    uint32 NVPartSize([IN] uint32 NVContext,
                      [OUT] uint64 PartSize);

    uint32 NVRead([IN] uint32 NVContext,
                  [IN] uint64 Length,
                  [IN] sint64 Offset,
                  [OUT] string Data);

    uint32 NVReadAll([IN] uint32 NVContext,
                     [OUT] string Data);

    uint32 NVWriteAll([IN] uint32 NVContext,
                      [IN] string Data,
                      [IN] boolean FullErase);

    uint32 MCDIRead([IN] string Device,
                    [IN] uint32 PartitionType,
                    [IN] uint32 Length,
                    [IN] uint32 Offset,
                    [OUT] string Data);

    uint32 MCDIWrite([IN] string Device,
                     [IN] uint32 PartitionType,
                     [IN] uint32 Offset,
                     [IN] string Data);

    uint32 MCDIV1Command([IN] string Device,
                         [IN, OUT] uint32 Command,
                         [IN, OUT] uint32 Len,
                         [IN, OUT] uint32 RC,
                         [IN, OUT] string Payload,
                         [OUT] sint32 Ioctl_rc,
                         [OUT] uint32 Ioctl_errno);

    uint32 MCDIV2Command([IN] string Device,
                         [IN, OUT] uint32 Command,
                         [IN, OUT] uint32 InLen,
                         [IN, OUT] uint32 OutLen,
                         [IN, OUT] uint32 Flags,
                         [IN, OUT] string Payload,
                         [IN, OUT] uint32 Host_errno,
                         [OUT] sint32 Ioctl_rc,
                         [OUT] uint32 Ioctl_errno);
};
]])

INSTANCE
class SF_NICCard : SF_Card {
WMIONLY([[
    [Read,Key : DisableOverride,Override("CreationClassName")] string CreationClassName;
    [Read,Key : DisableOverride,Override("Tag")] string Tag;
]])
ESXICOMMON([[
    uint32 GetVPDFields([IN] boolean StaticVPD,
                        [OUT,ArrayType("Indexed")] string FieldNames[],
                        [OUT,ArrayType("Indexed")] string FieldValues[],
                        [OUT,ArrayType("Indexed")] boolean HexValues[]);
]])
};

INSTANCE
class SF_PhysicalConnector : CIM_PhysicalConnector {
WMIONLY([[
    [Read,Key : DisableOverride,Override("CreationClassName")] string CreationClassName;
    [Read,Key : DisableOverride,Override("Tag")] string Tag;
]])
};

ASSOCIATION_NWMI
class SF_ConnectorOnPackage : CIM_ConnectorOnPackage {
WMIONLY([[
  [Override("GroupComponent"),Key] CIM_PhysicalPackage Ref GroupComponent;
  [Override("PartComponent"),Key] CIM_PhysicalConnector Ref PartComponent;
]])
};

ASSOCIATION
class SF_ConnectorOnNIC : SF_ConnectorOnPackage {
WMIONLY([[
  [Override("GroupComponent"),Key] CIM_PhysicalPackage Ref GroupComponent;
  [Override("PartComponent"),Key] CIM_PhysicalConnector Ref PartComponent;
]])
};

INSTANCE
class SF_EthernetPort : CIM_EthernetPort {
    [Key,Read,Override("CreationClassName")] string CreationClassName;
    [read,Key,Override("DeviceID")] string DeviceID;
    [Key,Read,Override("SystemCreationClassName")] string SystemCreationClassName;
    [Key,Read,Override("SystemName")] string SystemName;

ESXICOMMON([[
    uint32 GetIntrModeration([IN,ArrayType("Indexed")] string ParamNames[],
                             [OUT,ArrayType("Indexed")] uint32 ParamValues[]);
    uint32 SetIntrModeration([IN,ArrayType("Indexed")] string ParamNames[],
                             [IN,ArrayType("Indexed")] uint32 ParamValues[]);
]])
};

INSTANCE
class SF_PortController : CIM_PortController {
    [Key,Read,Override("CreationClassName")] string CreationClassName;
    [read,Key,Override("DeviceID")] string DeviceID;
    [Key,Read,Override("SystemCreationClassName")] string SystemCreationClassName;
    [Key,Read,Override("SystemName")] string SystemName;
};
]])

ROOT_SECTION([[
ASSOCIATION
class SF_SystemDevice : CIM_SystemDevice {
WMIONLY([[
  [Override("GroupComponent"),Key] CIM_System Ref GroupComponent;
  [Override("PartComponent"),Key] CIM_LogicalDevice Ref PartComponent;
]])
};
]])

ROOT_SECTION([[
ASSOCIATION_NWMI
class SF_ServiceAffectsElement : CIM_ServiceAffectsElement {
};
]])

IMP_SECTION([[
ASSOCIATION_NWMI
class SF_Realizes : CIM_Realizes {
WMIONLY([[
  [Override("Antecedent"),Key] CIM_PhysicalElement Ref Antecedent;
  [Override("Dependent"),Key] CIM_LogicalDevice Ref Dependent;
]])
};

ASSOCIATION
class SF_ConnectorRealizesPort : SF_Realizes {
WMIONLY([[
  [Override("Antecedent"),Key] CIM_PhysicalElement Ref Antecedent;
  [Override("Dependent"),Key] CIM_LogicalDevice Ref Dependent;
]])
};

ASSOCIATION
class SF_ConnectorRealizesController : SF_Realizes {
WMIONLY([[
  [Override("Antecedent"),Key] CIM_PhysicalElement Ref Antecedent;
  [Override("Dependent"),Key] CIM_LogicalDevice Ref Dependent;
]])
};

ASSOCIATION
class SF_CardRealizesController : SF_Realizes {
WMIONLY([[
  [Override("Antecedent"),Key] CIM_PhysicalElement Ref Antecedent;
  [Override("Dependent"),Key] CIM_LogicalDevice Ref Dependent;
]])
};

INSTANCE
class SF_LANEndpoint : CIM_LANEndpoint {
WMIONLY([[
    [Read,Key : DisableOverride,Override("Name")] string Name;
]])
};

ASSOCIATION_NWMI
class SF_DeviceSAPImplementation : CIM_DeviceSAPImplementation {
WMIONLY([[
  [Override("Antecedent"),Key] CIM_LogicalDevice Ref Antecedent;
  [Override("Dependent"),Key] CIM_ServiceAccessPoint Ref Dependent;
]])
};

ASSOCIATION
class SF_NICSAPImplementation : SF_DeviceSAPImplementation {
WMIONLY([[
  [Override("Antecedent"),Key] CIM_LogicalDevice Ref Antecedent;
  [Override("Dependent"),Key] CIM_ServiceAccessPoint Ref Dependent;
]])
};

ESXICOMMON([[
INSTANCE
class SF_SoftwareInstallationService : CIM_SoftwareInstallationService {
    uint32 GetRequiredFwImageName([IN] CIM_Card REF Target,
                                  [OUT] uint32 Type,
                                  [OUT] uint32 Subtype,
                                  [OUT] string Name,
                                  [OUT] string CurrentVersion);

    uint32 StartFwImageSend([OUT] string FileName);

    uint32 SendFwImageData([IN] string FileName,
                           [IN] string Base64Str);

    uint32 RemoveFwImage([IN] string FileName);

    uint32 GetLocalFwImageVersion([IN] CIM_Card REF Target,
                                  [IN] string FileName,
                                  [OUT] boolean ApplicableFound,
                                  [OUT] string Version);
};
]], [[
INSTANCE
class SF_SoftwareInstallationService : CIM_SoftwareInstallationService {
};
]])


INSTANCE
class SF_SoftwareInstallationServiceCapabilities : CIM_SoftwareInstallationServiceCapabilities {
};

ASSOCIATION
class SF_ElementCapabilities : CIM_ElementCapabilities {
      [Override("ManagedElement")]
   CIM_LogicalElement REF ManagedElement;
};

ASSOCIATION
class SF_ServiceAffectsCard : SF_ServiceAffectsElement {
      [Override("AffectedElement")]
   CIM_Card REF AffectedElement;
};

ASSOCIATION
class SF_ServiceAffectsController : SF_ServiceAffectsElement {
      [Override("AffectedElement")]
   CIM_PortController REF AffectedElement;
};
]])

ROOT_SECTION([[
ASSOCIATION
class SF_ServiceAffectsSystem : SF_ServiceAffectsElement {
      [Override("AffectedElement")]
   CIM_ComputerSystem REF AffectedElement;
};
]])

IMP_SECTION([[
ASSOCIATION
class SF_ServiceAffectsSoftware : SF_ServiceAffectsElement {
      [Override("AffectedElement")]
   CIM_SoftwareIdentity REF AffectedElement;
};
]])

ROOT_SECTION([[
ASSOCIATION
class SF_HostedService : CIM_HostedService {
WMIONLY([[
    [read,Override("Antecedent"),Key] CIM_System Ref Antecedent;
    [read,Override("Dependent"),Key] CIM_Service Ref Dependent;
]])
};
]])

IMP_SECTION([[
ASSOCIATION
class SF_ControlledBy : CIM_ControlledBy {
      [Override("Dependent")
      WMIONLYKEY
]
   CIM_EthernetPort REF Dependent;
      [Override("Antecedent")
      WMIONLYKEY
]
   CIM_PortController REF Antecedent;
};
]])

ROOT_SECTION([[
ASSOCIATION
class SF_HostedAccessPoint : CIM_HostedAccessPoint {
WMIONLY([[
  [read, Override("Antecedent"), Key] CIM_System Ref Antecedent;
  [read, Override("Dependent"), Key] CIM_ServiceAccessPoint Ref Dependent;
]])
};
]])

IMP_SECTION([[
INSTANCE
class SF_EnabledLogicalElementCapabilities : CIM_EnabledLogicalElementCapabilities {
};

INSTANCE_NWMI
class SF_RecordLog : CIM_RecordLog {
};

INSTANCE
class SF_ProviderLog : SF_RecordLog {
};

INSTANCE_NWMI
class SF_RecordLogCapabilities : CIM_RecordLogCapabilities {
};

INSTANCE
class SF_ProviderLogCapabilities : SF_RecordLogCapabilities {
};

INSTANCE
class SF_DiagnosticLog : CIM_DiagnosticLog {
};

INSTANCE
class SF_DiagnosticLogCapabilities : SF_RecordLogCapabilities {
};

INSTANCE
class SF_DiagnosticCompletionRecord : CIM_DiagnosticCompletionRecord {
};

INSTANCE
class SF_LogEntry : CIM_LogEntry {
    string File;
    uint32 Line;
};

ASSOCIATION
class SF_LogManagesRecord : CIM_LogManagesRecord {
};
]])

ROOT_SECTION([[
ASSOCIATION_NWMI
class SF_UseOfLog : CIM_UseOfLog {
WMIONLY([[
      [Override ( "Antecedent" ), Key]
   CIM_Log REF Antecedent;
]])
      [Override("Dependent")
      WMIONLYKEY
]
   CIM_ManagedSystemElement REF Dependent;
};

ASSOCIATION
class SF_SystemUseOfLog : SF_UseOfLog {
WMIONLY([[
      [Override ( "Antecedent" ), Key]
   CIM_Log REF Antecedent;
]])
      [Override("Dependent")
      WMIONLYKEY
]
   CIM_ComputerSystem REF Dependent;
};
]])

IMP_SECTION([[
ASSOCIATION
class SF_DiagnosticUseOfLog : SF_UseOfLog {
WMIONLY([[
      [Override ( "Antecedent" ), Key]
   CIM_Log REF Antecedent;
]])

      [Override("Dependent")
      WMIONLYKEY
]
   CIM_DiagnosticTest REF Dependent;
};

INSTANCE
class SF_DiagnosticTest : CIM_DiagnosticTest {
WMIONLY([[
// On Windows [implemented] qualifier should be specified for
// actually implemented method, so we have to copy this method
// definition from DMTF schema here.
   [implemented, 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", 
          "0x1000..0x7FFF", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "Busy", "DMTF Reserved", 
          "Method Reserved", "Vendor Specific" }]
   uint32 RunDiagnosticService(
         [IN, Description ( 
             "Specifies the element upon which the "
             "DiagnosticService SHOULD be run." )]
      CIM_ManagedSystemElement REF ManagedElement, 
         [IN, Description ( 
             "A string containing an encoding of the "
             "DiagnosticSettingData instance to be applied to "
             "the diagnostic. If null, the diagnostic\'s "
             "defaults are used." ), 
          EmbeddedInstance ( "CIM_DiagnosticSettingData" )]
      string DiagnosticSettings, 
         [IN, Description ( 
             "A string containing an encoding of the "
             "JobSettingData instance to be applied to the "
             "resulting job. If null, the job\'s defaults are "
             "used." ), 
          EmbeddedInstance ( "CIM_JobSettingData" )]
      string JobSettings, 
         [IN ( false ), OUT, Description ( 
             "Returns a reference to the resulting Job." )]
      CIM_ConcreteJob REF Job);
]])
};

INSTANCE
class SF_DiagnosticServiceCapabilities : CIM_DiagnosticServiceCapabilities {
};

ASSOCIATION
class SF_RecordAppliesToElement : CIM_RecordAppliesToElement {
WMIONLY([[
    [Override ( "Antecedent" ), Key]
    CIM_RecordForLog REF Antecedent;

    [Override ( "Dependent" ), Key]
    CIM_ManagedSystemElement REF Dependent;
]])
};

ASSOCIATION
class SF_OwningJobElement : CIM_OwningJobElement {
      [Override("OwningElement")]
   CIM_DiagnosticTest REF OwningElement;
};

ASSOCIATION
class SF_AffectedJobElement : CIM_AffectedJobElement {
      [Override("AffectedElement")]
   CIM_PortController REF AffectedElement;
};

ASSOCIATION
class SF_AvailableDiagnosticService : CIM_AvailableDiagnosticService {
      [Override("UserOfService")]
   CIM_Card REF UserOfService;
};

INSTANCE
class SF_DiagnosticSettingData : CIM_DiagnosticSettingData {
};

ASSOCIATION
class SF_ElementSettingData : CIM_ElementSettingData {
};
]])

INTEROP_SECTION([[
INSTANCE
class SF_RegisteredProfile : CIM_RegisteredProfile {
};

ASSOCIATION
class SF_ElementConformsToProfile : CIM_ElementConformsToProfile {
      [Override("ManagedElement")]
    CIM_ManagedSystemElement REF ManagedElement;
};

ASSOCIATION
class SF_ReferencedProfile : CIM_ReferencedProfile {
WMIONLY([[
    [Override ( "Antecedent" ), Key]
    CIM_RegisteredProfile REF Antecedent;

    [Override ( "Dependent" ),  Key]
   CIM_RegisteredProfile REF Dependent;
]])
};
]])

ROOT_SECTION([[
ASSOCIATION
class SF_ComputerSystemPackage : CIM_ComputerSystemPackage {
WMIONLY([[
  [Override("Antecedent"),Key] CIM_PhysicalPackage Ref Antecedent;
  [Override("Dependent"),Key] CIM_UnitaryComputerSystem Ref Dependent;
]])
};
]])

m4_ifelse(TARGET_CIM_SERVER, [[pegasus]],
[[m4_ifdef([[INBUILD]], 
[[SECTION([[IMP]],
[[INSTANCE
class IBMPSG_ComputerSystem : CIM_UnitaryComputerSystem
{
string Model;
string LPARID;
};

INSTANCE
class IBMSD_ComputerSystem : CIM_ComputerSystem
{
string UUID;
};

INSTANCE
class IBMSD_Chassis : CIM_Chassis
{
};

INSTANCE
class IBMSD_SPComputerSystem : CIM_ComputerSystem
{
};

INSTANCE
class PG_ComputerSystem : CIM_UnitaryComputerSystem
{  
    [
        Description ("The pager number of the primary system owner"
                     "available if DMI is installed, else blank."),
        MappingStrings {"MIF.DMTF|General Information|001.9"}
    ]  
    string PrimaryOwnerPager;

    [
        Description ("The name of the secondary owner of the system"
                     "available if DMI is installed, else blank."),
        MappingStrings {"MIF.DMTF|General Information|001.7"}
    ] 
    string SecondaryOwnerName;

    [
        Description ("The phone number of the secondary system owner,"
                     "available if DMI is installed, else blank."),
        MappingStrings {"MIF.DMTF|General Information|001.8"}
    ]  
    string SecondaryOwnerContact;

    [Description ("The pager number of the secondary system owner,"
                  "available if DMI is installed, else blank."),
     MappingStrings {"MIF.DMTF|General Information|001.10"}
    ]  
    string SecondaryOwnerPager;

    [Description ("The serial number of the system, fetched by the"
                  "uname() system service."),
     MappingStrings {"MIF.DMTF|General Information|001.13"}
    ]  
    string SerialNumber;

    [Description ("The identification number of the system,"
                  "currently blank."),
     MappingStrings {"MIF.DMTF|General Information|001.13"}
    ]  
    string IdentificationNumber;
};

INSTANCE
class PG_RegisteredProfile : CIM_RegisteredProfile
{
};
]])]])]])

ESXICOMMON([[
IMP_SECTION([[
INSTANCE
class OMC_UnitaryComputerSystem : CIM_UnitaryComputerSystem
{
      [Override("Caption")]
   string Caption;
      [Override("CreationClassName")]
   string CreationClassName;
      [Override("Dedicated")]
   uint16 Dedicated[];
      [Override("ElementName")]
   string ElementName;
      [Override("EnabledDefault")]
   uint16 EnabledDefault = 2;
      [Override("EnabledState")]
   uint16 EnabledState = 5;
      [Override("Name")]
   string Name;
      [Override("NameFormat")]
   string NameFormat;
      [Override("OtherDedicatedDescriptions")]
   string OtherDedicatedDescriptions[];
      [Override("RequestedState")]
   uint16 RequestedState = 12;
      [Override("ResetCapability")]
   uint16 ResetCapability;
};

INSTANCE
class OMC_Chassis : CIM_Chassis
{
};
]])]])

ROOT_SECTION([[
ASSOCIATION_NWMI
class SF_Container : CIM_Container
{
      [Override("GroupComponent")
      WMIONLYKEY
]
   CIM_Chassis REF GroupComponent;
      [Override("PartComponent")
      WMIONLYKEY
]
   CIM_Card REF PartComponent;
};

ASSOCIATION
class SF_ChassisContainsCard : SF_Container
{
};
]])

IMP_SECTION([[
INDICATION_NWMI
class SF_InstCreation : CIM_InstCreation
{
};

INDICATION
class SF_JobCreated : SF_InstCreation
{
};

INDICATION_NWMI
class SF_InstModification : CIM_InstModification
{
};

INDICATION
class SF_JobStarted : SF_InstModification
{
};

INDICATION
class SF_JobError : SF_InstModification
{
};

INDICATION
class SF_JobProgress : SF_InstModification
{
};

INDICATION
class SF_JobSuccess : SF_InstModification
{
};

INDICATION_NWMI
class SF_AlertIndication : CIM_AlertIndication
{
};

INDICATION
class SF_Alert : SF_AlertIndication
{
};
]])
