// Generated by genprov 2.0.24
#include "SF_DiagnosticTest_Provider.h"
#include "SF_ComputerSystem_Provider.h"
#include "SF_ConcreteJob_Provider.h"
#include "SF_NICCard_Provider.h"
#include "sf_provider.h"

CIMPLE_NAMESPACE_BEGIN

SF_DiagnosticTest *SF_DiagnosticTest_Provider::makeReference(const solarflare::Diagnostic& diag)
{
    const CIM_ComputerSystem *system = SF_ComputerSystem_Provider::findSystem();
    SF_DiagnosticTest *newSvc = SF_DiagnosticTest::create(true);
    
    newSvc->CreationClassName.set("SF_DiagnosticTest");
    newSvc->Name.set(diag.name());
    newSvc->SystemCreationClassName.set(system->CreationClassName.value);
    newSvc->SystemName.set(system->Name.value);

    return newSvc;
}

bool SF_DiagnosticTest_Provider::Enum::process(const solarflare::SystemElement& se)
{
    const solarflare::Diagnostic& diag = static_cast<const solarflare::Diagnostic&>(se);
    
    SF_DiagnosticTest *newSvc = makeReference(diag);

    newSvc->Description.set(diag.description());
    newSvc->ElementName.set(diag.name());
    unsigned p = diag.percentage();
    newSvc->Started.set(p > 0 && p < 100);
    newSvc->Characteristics.null = false;

    if (diag.isDestructive())
    {
        newSvc->Characteristics.value.append(SF_DiagnosticTest::_Characteristics::enum_Is_Destructive);
        newSvc->Characteristics.value.append(SF_DiagnosticTest::_Characteristics::enum_Is_Risky);
    }
    newSvc->TestTypes.null = false;
    switch (diag.testKind())
    {
        case solarflare::Diagnostic::FunctionalTest:
            newSvc->TestTypes.value.append(SF_DiagnosticTest::_TestTypes::enum_Functional);
            break;
        case solarflare::Diagnostic::StressTest:
            newSvc->TestTypes.value.append(SF_DiagnosticTest::_TestTypes::enum_Stress);
            break;
        case solarflare::Diagnostic::HealthCheckTest:
            newSvc->TestTypes.value.append(SF_DiagnosticTest::_TestTypes::enum_Health_Check);
            break;
        case solarflare::Diagnostic::MediaAccessTest:
            newSvc->TestTypes.value.append(SF_DiagnosticTest::_TestTypes::enum_Access_Test);
            newSvc->Characteristics.value.append(SF_DiagnosticTest::_Characteristics::enum_Media_Required);
            newSvc->Characteristics.value.append(SF_DiagnosticTest::_Characteristics::enum_Additional_Hardware_Required);
            break;
    }
    handler->handle(newSvc);
    return true;
}

bool SF_DiagnosticTest_Provider::DiagnosticFinder::process(solarflare::SystemElement& se)
{
    solarflare::Diagnostic& diag = static_cast<solarflare::Diagnostic&>(se);
    
    if (diag.name() == diagId)
    {
        obj = &diag;
        return false;
    }
    return true;
}

solarflare::Diagnostic *SF_DiagnosticTest_Provider::findByInstance(const SF_DiagnosticTest& p)
{
    if (p.CreationClassName.null || p.Name.null || 
        p.CreationClassName.value != "SF_DiagnosticTest" ||
        p.SystemCreationClassName.null || p.SystemName.null)
        return NULL;
    if (!SF_ComputerSystem_Provider::isOurSystem(p.SystemCreationClassName.value,
                                                 p.SystemName.value))
        return NULL;
    
    DiagnosticFinder finder(p.Name.value);
    solarflare::System::target.forAllDiagnostics(finder);
    return finder.found();
}


SF_DiagnosticTest_Provider::SF_DiagnosticTest_Provider()
{
}

SF_DiagnosticTest_Provider::~SF_DiagnosticTest_Provider()
{
}

Load_Status SF_DiagnosticTest_Provider::load()
{
    return LOAD_OK;
}

Unload_Status SF_DiagnosticTest_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_DiagnosticTest_Provider::get_instance(
    const SF_DiagnosticTest* model,
    SF_DiagnosticTest*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_DiagnosticTest_Provider::enum_instances(
    const SF_DiagnosticTest* model,
    Enum_Instances_Handler<SF_DiagnosticTest>* handler)
{
    Enum diagnostics(handler);

    solarflare::System::target.forAllDiagnostics(diagnostics);
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_DiagnosticTest_Provider::create_instance(
    SF_DiagnosticTest* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_DiagnosticTest_Provider::delete_instance(
    const SF_DiagnosticTest* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_DiagnosticTest_Provider::modify_instance(
    const SF_DiagnosticTest* model,
    const SF_DiagnosticTest* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Invoke_Method_Status SF_DiagnosticTest_Provider::RequestStateChange(
    const SF_DiagnosticTest* self,
    const Property<uint16>& RequestedState,
    CIM_ConcreteJob*& Job,
    const Property<Datetime>& TimeoutPeriod,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_DiagnosticTest_Provider::StartService(
    const SF_DiagnosticTest* self,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_DiagnosticTest_Provider::StopService(
    const SF_DiagnosticTest* self,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_DiagnosticTest_Provider::RunDiagnostic(
    const SF_DiagnosticTest* self,
    const CIM_ManagedElement* ManagedElement,
    const CIM_DiagnosticSetting* DiagSetting,
    const CIM_JobSettingData* JobSetting,
    CIM_ConcreteJob*& Job,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_DiagnosticTest_Provider::RunDiagnosticService(
    const SF_DiagnosticTest* self,
    const CIM_ManagedElement* ManagedElement,
    const CIM_DiagnosticSettingData* DiagnosticSettings,
    const CIM_JobSettingData* JobSettings,
    CIM_ConcreteJob*& Job,
    Property<uint32>& return_value)
{
    solarflare::Diagnostic *diag = findByInstance(*self);
    enum Result 
    {
        OK = 0,
        Error = 2,
        TimedOut = 3,
        Failed = 4,
        InvalidParameter = 5
    };
    
    if (diag == NULL || ManagedElement == NULL)
    {
        return_value.set(InvalidParameter);
    }
    else
    {
        const CIM_Card *card = cast<CIM_Card *>(ManagedElement);
        
        if (card == NULL || solarflare::Lookup::findNIC(*card) != diag->nic())
        {
            return_value.set(InvalidParameter);
        }
        else
        {
            diag->run(false);
            Job = cast<CIM_ConcreteJob *>(SF_ConcreteJob_Provider::makeReference(*diag, "diagThread"));
            return_value.set(OK);
        }
    }

    return INVOKE_METHOD_OK;
}

Invoke_Method_Status SF_DiagnosticTest_Provider::RunTest(
    const SF_DiagnosticTest* self,
    const CIM_ManagedSystemElement* SystemElement,
    const CIM_DiagnosticSetting* Setting,
    CIM_DiagnosticResult*& Result,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_DiagnosticTest_Provider::ClearResults(
    const SF_DiagnosticTest* self,
    const CIM_ManagedSystemElement* SystemElement,
    Property<Array_String>& ResultsNotCleared,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

Invoke_Method_Status SF_DiagnosticTest_Provider::DiscontinueTest(
    const SF_DiagnosticTest* self,
    const CIM_ManagedSystemElement* SystemElement,
    const CIM_DiagnosticResult* Result,
    Property<boolean>& TestingStopped,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
