// Generated by genprov 2.0.24
#include "SF_RecordLog_Provider.h"
#include "sf_platform.h"

CIMPLE_NAMESPACE_BEGIN

SF_RecordLog *SF_RecordLog_Provider::makeReference(const solarflare::Logger& log)
{
    SF_RecordLog *newLog = SF_RecordLog::create(true);
    
    newLog->InstanceID.set(solarflare::System::target.prefix());
    newLog->InstanceID.value.append(":");
    newLog->InstanceID.value.append(log.description());

    return newLog;
}

SF_RecordLog *SF_RecordLog_Provider::makeInstance(const solarflare::Logger& log)
{
    SF_RecordLog *newLog = makeReference(log);

    newLog->Name.set(log.description());
    newLog->ElementName.set(log.description());
    newLog->Description.set(log.description());
    newLog->OperationalStatus.null = false;
    newLog->OperationalStatus.value.append(SF_RecordLog::_OperationalStatus::enum_OK);
    newLog->HealthState.null = false;
    newLog->HealthState.value = SF_RecordLog::_HealthState::enum_OK;
    newLog->EnabledState.null = false;
    newLog->EnabledState.value = (log.isEnabled() ? 
                                  SF_RecordLog::_EnabledState::enum_Enabled :
                                  SF_RecordLog::_EnabledState::enum_Disabled);
    newLog->RequestedState.null = false;
    newLog->RequestedState.value = SF_RecordLog::_RequestedState::enum_No_Change;
    newLog->LogState.null = false;
    newLog->LogState.value = (log.isEnabled() ?
                              SF_RecordLog::_LogState::enum_Normal :
                              SF_RecordLog::_LogState::enum_Not_Applicable);
    newLog->OverwritePolicy.null = false;
    newLog->OverwritePolicy.value = SF_RecordLog::_OverwritePolicy::enum_Wraps_When_Full;
    newLog->MaxNumberOfRecords.set(log.logSize());
    newLog->CurrentNumberOfRecords.set(log.currentSize());

    return newLog;
}

solarflare::Logger *SF_RecordLog_Provider::findByInstance(const SF_RecordLog& instance)
{
    String name;
    size_t sep;
    if (instance.InstanceID.null)
        return NULL;

    name = instance.InstanceID.value;
    sep = name.find(':');
    if (sep == size_t(-1))
        return NULL;
    if (name.substr(0, sep) != solarflare::System::target.prefix())
        return NULL;
    name.remove(0, sep + 1);

    for (unsigned i = 0; solarflare::Logger::knownLogs[i] != NULL; i++)
    {
        if (name == solarflare::Logger::knownLogs[i]->description())
            return solarflare::Logger::knownLogs[i];
    }
    return NULL;
}

SF_RecordLog_Provider::SF_RecordLog_Provider()
{
}

SF_RecordLog_Provider::~SF_RecordLog_Provider()
{
}

Load_Status SF_RecordLog_Provider::load()
{
    return LOAD_OK;
}

Unload_Status SF_RecordLog_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_RecordLog_Provider::get_instance(
    const SF_RecordLog* model,
    SF_RecordLog*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_RecordLog_Provider::enum_instances(
    const SF_RecordLog* model,
    Enum_Instances_Handler<SF_RecordLog>* handler)
{
    for (unsigned i = 0; solarflare::Logger::knownLogs[i] != NULL; i++)
    {
        SF_RecordLog *l = makeInstance(*solarflare::Logger::knownLogs[i]);
        handler->handle(l);
    }
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_RecordLog_Provider::create_instance(
    SF_RecordLog* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_RecordLog_Provider::delete_instance(
    const SF_RecordLog* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_RecordLog_Provider::modify_instance(
    const SF_RecordLog* model,
    const SF_RecordLog* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Invoke_Method_Status SF_RecordLog_Provider::RequestStateChange(
    const SF_RecordLog* self,
    const Property<uint16>& RequestedState,
    CIM_ConcreteJob*& Job,
    const Property<Datetime>& TimeoutPeriod,
    Property<uint32>& return_value)
{
    /// CIMPLE is unable to generate enums for method parameters
    enum ReturnValue 
    {
        OK = 0,
        Error = 2,
        InvalidParameter = 5,
        BadTimeout = 4098,
    };
    solarflare::Logger *log = findByInstance(*self);
    if (log == NULL || RequestedState.null)
    {
        return_value.set(InvalidParameter);
    }
    else if (!TimeoutPeriod.null && !(TimeoutPeriod.value == Datetime()))
    {
        return_value.set(BadTimeout);
    }
    else
    {
        return_value.set(OK);
        switch (RequestedState.value)
        {
            case SF_RecordLog::_RequestedState::enum_Enabled:
                log->enable(true);
                break;
            case SF_RecordLog::_RequestedState::enum_Disabled:
                log->enable(false);
                break;
            case SF_RecordLog::_RequestedState::enum_Reset:
                if (log->isEnabled())
                {
                    log->enable(false);
                    log->enable(true);
                }
                break;
            default:
                return_value.set(InvalidParameter);
        }
    }
    return INVOKE_METHOD_OK;
}

Invoke_Method_Status SF_RecordLog_Provider::ClearLog(
    const SF_RecordLog* self,
    Property<uint32>& return_value)
{
    solarflare::Logger *log = findByInstance(*self);
    if (log == NULL)
        return_value.set(2); // Error
    else
    {
        log->clear();
        return_value.set(0);
    }
    return INVOKE_METHOD_OK;
}

/*@END@*/

CIMPLE_NAMESPACE_END
