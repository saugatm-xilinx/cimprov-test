// Generated by genprov 2.0.24
#include "SF_UseOfLog_Provider.h"
#include "SF_RecordLog_Provider.h"
#include "SF_ComputerSystem_Provider.h"
#include "SF_DiagnosticLog_Provider.h"
#include "SF_DiagnosticTest_Provider.h"
#include "sf_provider.h"

CIMPLE_NAMESPACE_BEGIN

bool SF_UseOfLog_Provider::Enum::process(const solarflare::SystemElement& se)
{
    const solarflare::Diagnostic& diag = static_cast<const solarflare::Diagnostic&>(se);
    
    SF_UseOfLog *link = SF_UseOfLog::create(true);

    link->Antecedent = cast<CIM_Log *>(SF_DiagnosticLog_Provider::makeReference(diag, diag.errorLog()));
    link->Dependent = cast<CIM_ManagedSystemElement *>(diag.cimReference(SF_DiagnosticTest::static_meta_class));
    handler->handle(link);
    
    if (&diag.okLog() != &diag.errorLog())
    {
        link = SF_UseOfLog::create(true);
        link->Antecedent = cast<CIM_Log *>(SF_DiagnosticLog_Provider::makeReference(diag, diag.okLog()));
        link->Dependent = cast<CIM_ManagedSystemElement *>(diag.cimReference(SF_DiagnosticTest::static_meta_class));
        handler->handle(link);
    }
    
    return true;
}

SF_UseOfLog_Provider::SF_UseOfLog_Provider()
{
}

SF_UseOfLog_Provider::~SF_UseOfLog_Provider()
{
}

Load_Status SF_UseOfLog_Provider::load()
{
    solarflare::System::target.initialize();
    return LOAD_OK;
}

Unload_Status SF_UseOfLog_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_UseOfLog_Provider::get_instance(
    const SF_UseOfLog* model,
    SF_UseOfLog*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_UseOfLog_Provider::enum_instances(
    const SF_UseOfLog* model,
    Enum_Instances_Handler<SF_UseOfLog>* handler)
{
    for (unsigned i = 0; solarflare::Logger::knownLogs[i] != NULL; i++)
    {
        SF_RecordLog *log = SF_RecordLog_Provider::makeReference(*solarflare::Logger::knownLogs[i]);
        CIM_ComputerSystem *sys = solarflare::CIMHelper::findSystem()->clone();
        SF_UseOfLog *link = SF_UseOfLog::create(true);
        
        link->Antecedent = cast<CIM_Log *>(log);
        link->Dependent = cast<CIM_ManagedSystemElement *>(sys);
        handler->handle(link);
    }
    Enum diagLogs(handler);
    solarflare::System::target.forAllDiagnostics(diagLogs);
    
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_UseOfLog_Provider::create_instance(
    SF_UseOfLog* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_UseOfLog_Provider::delete_instance(
    const SF_UseOfLog* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_UseOfLog_Provider::modify_instance(
    const SF_UseOfLog* model,
    const SF_UseOfLog* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Enum_Associator_Names_Status SF_UseOfLog_Provider::enum_associator_names(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associator_Names_Handler<Instance>* handler)
{
    return ENUM_ASSOCIATOR_NAMES_UNSUPPORTED;
}

Enum_Associators_Status SF_UseOfLog_Provider::enum_associators(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associators_Handler<Instance>* handler)
{
    return ENUM_ASSOCIATORS_UNSUPPORTED;
}

Enum_References_Status SF_UseOfLog_Provider::enum_references(
    const Instance* instance,
    const SF_UseOfLog* model,
    const String& role,
    Enum_References_Handler<SF_UseOfLog>* handler)
{
    return ENUM_REFERENCES_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
