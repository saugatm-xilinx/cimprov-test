// Generated by genprov 2.0.24
#ifndef _SF_DiagnosticCompletionRecord_Provider_h
#define _SF_DiagnosticCompletionRecord_Provider_h

#include <cimple/cimple.h>
#include "SF_DiagnosticCompletionRecord.h"
#include "sf_platform.h"

CIMPLE_NAMESPACE_BEGIN

class SF_DiagnosticCompletionRecord_Provider
{
    class EntryEnum : public solarflare::LogEntryIterator {
        const solarflare::Diagnostic *diag;
        const solarflare::Logger *owner;
        Enum_Instances_Handler<SF_DiagnosticCompletionRecord>* handler;
    public:
        EntryEnum(const solarflare::Diagnostic *d,
                  const solarflare::Logger *o,
                  Enum_Instances_Handler<SF_DiagnosticCompletionRecord>* h) :
            diag(d), owner(o), handler(h) {}
        virtual bool process(const solarflare::LogEntry& e);
    };

    class Enum : public solarflare::ConstElementEnumerator {
        Enum_Instances_Handler<SF_DiagnosticCompletionRecord>* handler;
    public:
        Enum(Enum_Instances_Handler<SF_DiagnosticCompletionRecord>* h) :
            handler(h) {}
        virtual bool process(const solarflare::SystemElement& diag);
    };
public:

    static SF_DiagnosticCompletionRecord *makeReference(const solarflare::Diagnostic& diag,
                                                        const solarflare::Logger& parent,
                                                        const solarflare::LogEntry& entry);

    typedef SF_DiagnosticCompletionRecord Class;

    SF_DiagnosticCompletionRecord_Provider();

    ~SF_DiagnosticCompletionRecord_Provider();

    Load_Status load();

    Unload_Status unload();

    Get_Instance_Status get_instance(
        const SF_DiagnosticCompletionRecord* model,
        SF_DiagnosticCompletionRecord*& instance);

    Enum_Instances_Status enum_instances(
        const SF_DiagnosticCompletionRecord* model,
        Enum_Instances_Handler<SF_DiagnosticCompletionRecord>* handler);

    Create_Instance_Status create_instance(
        SF_DiagnosticCompletionRecord* instance);

    Delete_Instance_Status delete_instance(
        const SF_DiagnosticCompletionRecord* instance);

    Modify_Instance_Status modify_instance(
        const SF_DiagnosticCompletionRecord* model,
        const SF_DiagnosticCompletionRecord* instance);

    /*@END@*/
};

CIMPLE_NAMESPACE_END

#endif /* _SF_DiagnosticCompletionRecord_Provider_h */
