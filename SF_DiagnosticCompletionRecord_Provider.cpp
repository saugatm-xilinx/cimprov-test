// Generated by genprov 2.0.24
#include "SF_DiagnosticCompletionRecord_Provider.h"

CIMPLE_NAMESPACE_BEGIN

SF_DiagnosticCompletionRecord *
SF_DiagnosticCompletionRecord_Provider::makeReference(const solarflare::Diagnostic& diag,
                                                      const solarflare::Logger& parent,
                                                      const solarflare::LogEntry& entry)
{
    Buffer buf;
    SF_DiagnosticCompletionRecord *l = SF_DiagnosticCompletionRecord::create(true);
    
    buf.appends(solarflare::System::target.prefix().c_str());
    buf.append(':');
    buf.appends(diag.name().c_str());
    buf.append(' ');
    buf.appends(parent.description());
    buf.append('#');
    buf.append_uint64(entry.id());
    l->InstanceID.set(buf.data());
    return l;
}

bool SF_DiagnosticCompletionRecord_Provider::EntryEnum::process(const solarflare::LogEntry& entry)
{
    static unsigned const severityMap[] = {
        SF_DiagnosticCompletionRecord::_PerceivedSeverity::enum_Fatal_NonRecoverable,
        SF_DiagnosticCompletionRecord::_PerceivedSeverity::enum_Major,
        SF_DiagnosticCompletionRecord::_PerceivedSeverity::enum_Minor,
        SF_DiagnosticCompletionRecord::_PerceivedSeverity::enum_Information,
        SF_DiagnosticCompletionRecord::_PerceivedSeverity::enum_Information,
    };

    char id[32];
    SF_DiagnosticCompletionRecord *le = makeReference(*diag, *owner, entry);
    le->RecordFormat.set("");
    le->RecordData.set(entry.message());
    le->CreationTimeStamp.set(entry.stamp());
    le->ServiceName.set(diag->name());
    le->ManagedElementName.set(diag->nic()->name());
    le->ExpirationDate.set(Datetime::now());
    le->RecordType.null = false;
    le->RecordType.value = SF_DiagnosticCompletionRecord::_RecordType::enum_Results;
    
    le->PerceivedSeverity.null = false;
    le->PerceivedSeverity.value = severityMap[owner->severity()];

    le->LoopsPassed.set(entry.passed());
    le->LoopsFailed.set(entry.failed());
    sprintf(id, "%8.8x", entry.error());
    le->ErrorCode.null = false;
    le->ErrorCode.value.append(String(id));
    le->ErrorCount.null = false;
    le->CompletionState.null = false;
    if (entry.error() != 0 || entry.failed() != 0)
    {
        le->ErrorCount.value.append(entry.failed() ? entry.failed() : 1);
        le->CompletionState.value = SF_DiagnosticCompletionRecord::_CompletionState::enum_Failed;
    }
    else
    {
        le->ErrorCount.value.append(0);
        le->CompletionState.value = SF_DiagnosticCompletionRecord::_CompletionState::enum_OK;
    }
    
    handler->handle(le);
    return true;
}

bool SF_DiagnosticCompletionRecord_Provider::Enum::process(const solarflare::SystemElement& se)
{
    const solarflare::Diagnostic& diag = static_cast<const solarflare::Diagnostic&>(se);
    
    EntryEnum entries(&diag, &diag.errorLog(), handler);
    diag.errorLog().forAllEntries(entries);
    if (&diag.okLog() != &diag.errorLog())
    {
        EntryEnum okentries(&diag, &diag.okLog(), handler);
        diag.okLog().forAllEntries(okentries);
    }
    return true;
}

SF_DiagnosticCompletionRecord_Provider::SF_DiagnosticCompletionRecord_Provider()
{
}

SF_DiagnosticCompletionRecord_Provider::~SF_DiagnosticCompletionRecord_Provider()
{
}

Load_Status SF_DiagnosticCompletionRecord_Provider::load()
{
    solarflare::System::target.initialize();
    return LOAD_OK;
}

Unload_Status SF_DiagnosticCompletionRecord_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_DiagnosticCompletionRecord_Provider::get_instance(
    const SF_DiagnosticCompletionRecord* model,
    SF_DiagnosticCompletionRecord*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_DiagnosticCompletionRecord_Provider::enum_instances(
    const SF_DiagnosticCompletionRecord* model,
    Enum_Instances_Handler<SF_DiagnosticCompletionRecord>* handler)
{
    Enum logs(handler);
    solarflare::System::target.forAllDiagnostics(logs);
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_DiagnosticCompletionRecord_Provider::create_instance(
    SF_DiagnosticCompletionRecord* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_DiagnosticCompletionRecord_Provider::delete_instance(
    const SF_DiagnosticCompletionRecord* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_DiagnosticCompletionRecord_Provider::modify_instance(
    const SF_DiagnosticCompletionRecord* model,
    const SF_DiagnosticCompletionRecord* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
