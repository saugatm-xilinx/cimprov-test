// Generated by genprov 2.0.24
#include "SF_SystemDevice_Provider.h"
#include "SF_ComputerSystem_Provider.h"
#include "SF_PortController_Provider.h"
#include "SF_EthernetPort_Provider.h"

CIMPLE_NAMESPACE_BEGIN

bool SF_SystemDevice_Provider::NICEnum::process(const solarflare::SystemElement& se)
{
    const solarflare::NIC& nic = static_cast<const solarflare::NIC&>(se);
    SF_SystemDevice *dev = SF_SystemDevice::create(true);

    dev->GroupComponent = cast<CIM_System *>(SF_ComputerSystem_Provider::findSystem()->clone());
    dev->PartComponent = cast<CIM_LogicalDevice *>(SF_PortController_Provider::makeReference(nic));

    handler->handle(dev);

    return true;
}

bool SF_SystemDevice_Provider::IntfEnum::process(const solarflare::SystemElement& se)
{
    const solarflare::Interface& intf = static_cast<const solarflare::Interface&>(se);
    SF_SystemDevice *dev = SF_SystemDevice::create(true);

    dev->GroupComponent = cast<CIM_System *>(SF_ComputerSystem_Provider::findSystem()->clone());
    dev->PartComponent = cast<CIM_LogicalDevice *>(SF_EthernetPort_Provider::makeReference(intf));

    handler->handle(dev);

    return true;
}

SF_SystemDevice_Provider::SF_SystemDevice_Provider()
{
}

SF_SystemDevice_Provider::~SF_SystemDevice_Provider()
{
}

Load_Status SF_SystemDevice_Provider::load()
{
    solarflare::System::target.initialize();
    return LOAD_OK;
}

Unload_Status SF_SystemDevice_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_SystemDevice_Provider::get_instance(
    const SF_SystemDevice* model,
    SF_SystemDevice*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_SystemDevice_Provider::enum_instances(
    const SF_SystemDevice* model,
    Enum_Instances_Handler<SF_SystemDevice>* handler)
{
    NICEnum nicdevices(handler);
    IntfEnum idevices(handler);
    solarflare::System::target.forAllNICs(nicdevices);
    solarflare::System::target.forAllInterfaces(idevices);
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_SystemDevice_Provider::create_instance(
    SF_SystemDevice* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_SystemDevice_Provider::delete_instance(
    const SF_SystemDevice* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_SystemDevice_Provider::modify_instance(
    const SF_SystemDevice* model,
    const SF_SystemDevice* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Enum_Associator_Names_Status SF_SystemDevice_Provider::enum_associator_names(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associator_Names_Handler<Instance>* handler)
{
    return ENUM_ASSOCIATOR_NAMES_UNSUPPORTED;
}

Enum_Associators_Status SF_SystemDevice_Provider::enum_associators(
    const Instance* instance,
    const String& result_class,
    const String& role,
    const String& result_role,
    Enum_Associators_Handler<Instance>* handler)
{
    return ENUM_ASSOCIATORS_UNSUPPORTED;
}

Enum_References_Status SF_SystemDevice_Provider::enum_references(
    const Instance* instance,
    const SF_SystemDevice* model,
    const String& role,
    Enum_References_Handler<SF_SystemDevice>* handler)
{
    return ENUM_REFERENCES_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
