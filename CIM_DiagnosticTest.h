/*NOCHKSRC*/
//==============================================================================
//
// PLEASE DO NOT EDIT; THIS FILE WAS AUTOMATICALLY GENERATED BY GENCLASS 2.0.24
//
//==============================================================================

#ifndef _cimple_CIM_DiagnosticTest_h
#define _cimple_CIM_DiagnosticTest_h

#include <cimple/cimple.h>
#include "CIM_DiagnosticService.h"
#include "CIM_ManagedSystemElement.h"
#include "CIM_DiagnosticSetting.h"
#include "CIM_DiagnosticResult.h"
#include "CIM_ManagedSystemElement.h"
#include "CIM_ManagedSystemElement.h"
#include "CIM_DiagnosticResult.h"

CIMPLE_NAMESPACE_BEGIN

// CIM_DiagnosticTest keys:
//     Name
//     SystemCreationClassName
//     SystemName
//     CreationClassName

/*[1194]*/
class CIM_DiagnosticTest : public Instance
{
public:
    // CIM_ManagedElement features:
    Property<String> InstanceID;
    Property<String> Caption;
    Property<String> Description;
    Property<String> ElementName;
    Property<uint64> Generation;

    // CIM_ManagedSystemElement features:
    Property<Datetime> InstallDate;
    Property<String> Name;
    struct _OperationalStatus
    {
        enum
        {
            enum_Unknown = 0,
            enum_Other = 1,
            enum_OK = 2,
            enum_Degraded = 3,
            enum_Stressed = 4,
            enum_Predictive_Failure = 5,
            enum_Error = 6,
            enum_Non_Recoverable_Error = 7,
            enum_Starting = 8,
            enum_Stopping = 9,
            enum_Stopped = 10,
            enum_In_Service = 11,
            enum_No_Contact = 12,
            enum_Lost_Communication = 13,
            enum_Aborted = 14,
            enum_Dormant = 15,
            enum_Supporting_Entity_in_Error = 16,
            enum_Completed = 17,
            enum_Power_Mode = 18,
            enum_DMTF_Reserved = 0,
            enum_Vendor_Reserved = 0,
        };
        Array_uint16 value;
        uint8 null;
    }
    OperationalStatus;
    Property<Array_String> StatusDescriptions;
    Property<String> Status;
    struct _HealthState
    {
        enum
        {
            enum_Unknown = 0,
            enum_OK = 5,
            enum_Degraded_Warning = 10,
            enum_Minor_failure = 15,
            enum_Major_failure = 20,
            enum_Critical_failure = 25,
            enum_Non_recoverable_error = 30,
            enum_DMTF_Reserved = 0,
        };
        uint16 value;
        uint8 null;
    }
    HealthState;
    struct _CommunicationStatus
    {
        enum
        {
            enum_Unknown = 0,
            enum_Not_Available = 1,
            enum_Communication_OK = 2,
            enum_Lost_Communication = 3,
            enum_No_Contact = 4,
            enum_DMTF_Reserved = 0,
            enum_Vendor_Reserved = 0,
        };
        uint16 value;
        uint8 null;
    }
    CommunicationStatus;
    struct _DetailedStatus
    {
        enum
        {
            enum_Not_Available = 0,
            enum_No_Additional_Information = 1,
            enum_Stressed = 2,
            enum_Predictive_Failure = 3,
            enum_Non_Recoverable_Error = 4,
            enum_Supporting_Entity_in_Error = 5,
            enum_DMTF_Reserved = 0,
            enum_Vendor_Reserved = 0,
        };
        uint16 value;
        uint8 null;
    }
    DetailedStatus;
    struct _OperatingStatus
    {
        enum
        {
            enum_Unknown = 0,
            enum_Not_Available = 1,
            enum_Servicing = 2,
            enum_Starting = 3,
            enum_Stopping = 4,
            enum_Stopped = 5,
            enum_Aborted = 6,
            enum_Dormant = 7,
            enum_Completed = 8,
            enum_Migrating = 9,
            enum_Emigrating = 10,
            enum_Immigrating = 11,
            enum_Snapshotting = 12,
            enum_Shutting_Down = 13,
            enum_In_Test = 14,
            enum_Transitioning = 15,
            enum_In_Service = 16,
            enum_DMTF_Reserved = 0,
            enum_Vendor_Reserved = 0,
        };
        uint16 value;
        uint8 null;
    }
    OperatingStatus;
    struct _PrimaryStatus
    {
        enum
        {
            enum_Unknown = 0,
            enum_OK = 1,
            enum_Degraded = 2,
            enum_Error = 3,
            enum_DMTF_Reserved = 0,
            enum_Vendor_Reserved = 0,
        };
        uint16 value;
        uint8 null;
    }
    PrimaryStatus;

    // CIM_LogicalElement features:

    // CIM_EnabledLogicalElement features:
    struct _EnabledState
    {
        enum
        {
            enum_Unknown = 0,
            enum_Other = 1,
            enum_Enabled = 2,
            enum_Disabled = 3,
            enum_Shutting_Down = 4,
            enum_Not_Applicable = 5,
            enum_Enabled_but_Offline = 6,
            enum_In_Test = 7,
            enum_Deferred = 8,
            enum_Quiesce = 9,
            enum_Starting = 10,
            enum_DMTF_Reserved = 11,
            enum_Vendor_Reserved = 32768,
        };
        uint16 value;
        uint8 null;
    }
    EnabledState;
    Property<String> OtherEnabledState;
    struct _RequestedState
    {
        enum
        {
            enum_Unknown = 0,
            enum_Enabled = 2,
            enum_Disabled = 3,
            enum_Shut_Down = 4,
            enum_No_Change = 5,
            enum_Offline = 6,
            enum_Test = 7,
            enum_Deferred = 8,
            enum_Quiesce = 9,
            enum_Reboot = 10,
            enum_Reset = 11,
            enum_Not_Applicable = 12,
            enum_DMTF_Reserved = 0,
            enum_Vendor_Reserved = 32768,
        };
        uint16 value;
        uint8 null;
    }
    RequestedState;
    struct _EnabledDefault
    {
        enum
        {
            enum_Enabled = 2,
            enum_Disabled = 3,
            enum_Not_Applicable = 5,
            enum_Enabled_but_Offline = 6,
            enum_No_Default = 7,
            enum_Quiesce = 9,
            enum_DMTF_Reserved = 0,
            enum_Vendor_Reserved = 32768,
        };
        uint16 value;
        uint8 null;
    }
    EnabledDefault;
    Property<Datetime> TimeOfLastStateChange;
    struct _AvailableRequestedStates
    {
        enum
        {
            enum_Enabled = 2,
            enum_Disabled = 3,
            enum_Shut_Down = 4,
            enum_Offline = 6,
            enum_Test = 7,
            enum_Defer = 8,
            enum_Quiesce = 9,
            enum_Reboot = 10,
            enum_Reset = 11,
            enum_DMTF_Reserved = 0,
        };
        Array_uint16 value;
        uint8 null;
    }
    AvailableRequestedStates;
    struct _TransitioningToState
    {
        enum
        {
            enum_Unknown = 0,
            enum_Enabled = 2,
            enum_Disabled = 3,
            enum_Shut_Down = 4,
            enum_No_Change = 5,
            enum_Offline = 6,
            enum_Test = 7,
            enum_Defer = 8,
            enum_Quiesce = 9,
            enum_Reboot = 10,
            enum_Reset = 11,
            enum_Not_Applicable = 12,
            enum_DMTF_Reserved = 0,
        };
        uint16 value;
        uint8 null;
    }
    TransitioningToState;

    // CIM_Service features:
    Property<String> SystemCreationClassName;
    Property<String> SystemName;
    Property<String> CreationClassName;
    Property<String> PrimaryOwnerName;
    Property<String> PrimaryOwnerContact;
    Property<String> StartMode;
    Property<boolean> Started;

    // CIM_DiagnosticService features:

    // CIM_DiagnosticTest features:
    struct _Characteristics
    {
        enum
        {
            enum_Unknown = 0,
            enum_Other = 1,
            enum_Is_Exclusive = 2,
            enum_Is_Interactive = 3,
            enum_Is_Destructive = 4,
            enum_Is_Risky = 5,
            enum_Is_Package = 6,
            enum_Reserved = 7,
            enum_Is_Synchronous = 8,
            enum_Media_Required = 9,
            enum_Additional_Hardware_Required = 10,
        };
        Array_uint16 value;
        uint8 null;
    }
    Characteristics;
    Property<String> OtherCharacteristicDescription;
    Property<Array_String> OtherCharacteristicsDescriptions;
    Property<boolean> IsInUse;
    struct _ResourcesUsed
    {
        enum
        {
            enum_CPU = 2,
            enum_Memory = 3,
            enum_Hard_Disk = 4,
            enum_CDROM = 5,
            enum_Floppy = 6,
            enum_PCI_Bus = 7,
            enum_USB_Bus = 8,
            enum_1394_Bus = 9,
            enum_SCSI_Bus = 10,
            enum_IDE_Bus = 11,
            enum_Network = 12,
            enum_ISA_Bus = 13,
            enum_EISA_Bus = 14,
            enum_VESA_Bus = 15,
            enum_PCMCIA_Bus = 16,
            enum_CardBus = 17,
            enum_Access_bus = 18,
            enum_NuBus = 19,
            enum_AGP = 20,
            enum_VME_Bus = 21,
            enum_Sbus_IEEE_1396_1993 = 22,
            enum_MCA_Bus = 23,
            enum_GIO_Bus = 24,
            enum_XIO_Bus = 25,
            enum_HIO_Bus = 26,
            enum_PMC_Bus = 27,
            enum_SIO_Bus = 28,
        };
        Array_uint16 value;
        uint8 null;
    }
    ResourcesUsed;
    struct _TestTypes
    {
        enum
        {
            enum_Unknown = 0,
            enum_Other = 1,
            enum_Functional = 2,
            enum_Stress = 3,
            enum_Health_Check = 4,
            enum_Access_Test = 5,
            enum_Media_Verify = 6,
            enum_DMTF_Reserved = 0,
            enum_Vendor_Reserved = 0,
        };
        Array_uint16 value;
        uint8 null;
    }
    TestTypes;
    Property<Array_String> OtherTestTypesDescriptions;

    CIMPLE_CLASS(CIM_DiagnosticTest)
};

typedef CIM_EnabledLogicalElement_RequestStateChange_method CIM_DiagnosticTest_RequestStateChange_method;

typedef CIM_Service_StartService_method CIM_DiagnosticTest_StartService_method;

typedef CIM_Service_StopService_method CIM_DiagnosticTest_StopService_method;

typedef CIM_Service_ChangeAffectedElementsAssignedSequence_method CIM_DiagnosticTest_ChangeAffectedElementsAssignedSequence_method;

typedef CIM_DiagnosticService_RunDiagnostic_method CIM_DiagnosticTest_RunDiagnostic_method;

typedef CIM_DiagnosticService_RunDiagnosticService_method CIM_DiagnosticTest_RunDiagnosticService_method;

/*[1280]*/
class CIM_DiagnosticTest_RunTest_method : public Instance
{
public:
    CIM_ManagedSystemElement* SystemElement;
    CIM_DiagnosticSetting* Setting;
    CIM_DiagnosticResult* Result;
    Property<uint32> return_value;
    CIMPLE_METHOD(CIM_DiagnosticTest_RunTest_method)
};

/*[1280]*/
class CIM_DiagnosticTest_ClearResults_method : public Instance
{
public:
    CIM_ManagedSystemElement* SystemElement;
    Property<Array_String> ResultsNotCleared;
    Property<uint32> return_value;
    CIMPLE_METHOD(CIM_DiagnosticTest_ClearResults_method)
};

/*[1280]*/
class CIM_DiagnosticTest_DiscontinueTest_method : public Instance
{
public:
    CIM_ManagedSystemElement* SystemElement;
    CIM_DiagnosticResult* Result;
    Property<boolean> TestingStopped;
    Property<uint32> return_value;
    CIMPLE_METHOD(CIM_DiagnosticTest_DiscontinueTest_method)
};

CIMPLE_NAMESPACE_END

#endif /* _cimple_CIM_DiagnosticTest_h */
