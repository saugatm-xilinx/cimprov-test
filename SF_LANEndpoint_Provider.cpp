// Generated by genprov 2.0.24
#include "SF_LANEndpoint_Provider.h"
#include "SF_ComputerSystem_Provider.h"
#include "sf_provider.h"

CIMPLE_NAMESPACE_BEGIN


SF_LANEndpoint *SF_LANEndpoint_Provider::makeReference(const solarflare::Interface& intf)
{
    const CIM_ComputerSystem *system = solarflare::CIMHelper::findSystem();
    SF_LANEndpoint *newEP = SF_LANEndpoint::create(true);
    
    newEP->CreationClassName.set("SF_LANEndpoint");
    newEP->Name.set(intf.ifName());
    newEP->SystemCreationClassName.set(system->CreationClassName.value);
    newEP->SystemName.set(system->Name.value);
    return newEP;
}


bool SF_LANEndpoint_Provider::InterfaceEnum::process(const solarflare::SystemElement& se)
{
    const solarflare::Interface& intf = static_cast<const solarflare::Interface&>(se);
    
    SF_LANEndpoint *newEP = makeReference(intf);

    newEP->Description.set(intf.description());
    newEP->ElementName.set(intf.ifName());
    newEP->NameFormat.set("Interface");
    newEP->InstanceID.set(solarflare::System::target.prefix());
    newEP->InstanceID.value.append(":");
    newEP->InstanceID.value.append(intf.name());
    newEP->EnabledState.null = false;
    newEP->EnabledState.value = (intf.ifStatus() ?
                                 SF_LANEndpoint::_EnabledState::enum_Enabled : 
                                 SF_LANEndpoint::_EnabledState::enum_Disabled);
    newEP->RequestedState.null = false;
    newEP->RequestedState.value = SF_LANEndpoint::_RequestedState::enum_Not_Applicable;
    newEP->ProtocolIFType.null = false;
    newEP->ProtocolIFType.value = SF_LANEndpoint::_ProtocolIFType::enum_Gigabit_Ethernet;
    newEP->MACAddress.set(intf.currentMAC().string());

    handler->handle(newEP);
    
    return true;
}


SF_LANEndpoint_Provider::SF_LANEndpoint_Provider()
{
}

SF_LANEndpoint_Provider::~SF_LANEndpoint_Provider()
{
}

Load_Status SF_LANEndpoint_Provider::load()
{
    return LOAD_OK;
}

Unload_Status SF_LANEndpoint_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status SF_LANEndpoint_Provider::get_instance(
    const SF_LANEndpoint* model,
    SF_LANEndpoint*& instance)
{
    return GET_INSTANCE_UNSUPPORTED;
}

Enum_Instances_Status SF_LANEndpoint_Provider::enum_instances(
    const SF_LANEndpoint* model,
    Enum_Instances_Handler<SF_LANEndpoint>* handler)
{
    InterfaceEnum intfs(handler);
    solarflare::System::target.forAllInterfaces(intfs);
    return ENUM_INSTANCES_OK;
}

Create_Instance_Status SF_LANEndpoint_Provider::create_instance(
    SF_LANEndpoint* instance)
{
    return CREATE_INSTANCE_UNSUPPORTED;
}

Delete_Instance_Status SF_LANEndpoint_Provider::delete_instance(
    const SF_LANEndpoint* instance)
{
    return DELETE_INSTANCE_UNSUPPORTED;
}

Modify_Instance_Status SF_LANEndpoint_Provider::modify_instance(
    const SF_LANEndpoint* model,
    const SF_LANEndpoint* instance)
{
    return MODIFY_INSTANCE_UNSUPPORTED;
}

Invoke_Method_Status SF_LANEndpoint_Provider::RequestStateChange(
    const SF_LANEndpoint* self,
    const Property<uint16>& RequestedState,
    CIM_ConcreteJob*& Job,
    const Property<Datetime>& TimeoutPeriod,
    Property<uint32>& return_value)
{
    return INVOKE_METHOD_UNSUPPORTED;
}

/*@END@*/

CIMPLE_NAMESPACE_END
